// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PoilabsVdNavigationCore
import Alamofire
import CoreBluetooth
import CoreLocation
import Foundation
import PoilabsPositioning
@_exported import PoilabsVdNavigationCore
import Swift
import UIKit
import _Concurrency
public protocol PositioningManagerDelegate {
  func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, heading: CoreLocation.CLHeading)
  func positioningManager(didUpdateNearByLocations locations: [(PoilabsVdNavigationCore.Poi, Swift.Double, Swift.Int?)])
  func positioningManager(didStatusChanged status: PoilabsVdNavigationCore.UserLocationStatus)
}
public protocol PositioninManagerErrorDelegate {
  func positioningManager(didFail error: PoilabsVdNavigationCore.PMError)
  func positioningManagerDidStart()
}
public enum PMError {
  case location
  case bluetooth
  public static func == (a: PoilabsVdNavigationCore.PMError, b: PoilabsVdNavigationCore.PMError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UserLocationStatus {
  case waiting
  case notFound
  case found
  public static func == (a: PoilabsVdNavigationCore.UserLocationStatus, b: PoilabsVdNavigationCore.UserLocationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PositioningManager : ObjectiveC.NSObject {
  public var delegate: PoilabsVdNavigationCore.PositioningManagerDelegate? {
    get
    set
  }
  public var errorDelegate: PoilabsVdNavigationCore.PositioninManagerErrorDelegate?
  public static let shared: PoilabsVdNavigationCore.PositioningManager
  public func startPositioning()
  public func stopPositioning()
  public func getPlaceTitle() -> Swift.String
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension PoilabsVdNavigationCore.PositioningManager : PoilabsPositioning.PoilabsPositioningDelegate {
  @objc dynamic public func poilabsPositioning(didUpdateLocation location: CoreLocation.CLLocationCoordinate2D, area: Swift.Double)
  @objc dynamic public func poilabsPositioningDidStart()
  @objc dynamic public func poilabsPositioning(didStatusChange status: PoilabsPositioning.PLPStatus, reason: PoilabsPositioning.PLPLocationStatusReason)
  @objc dynamic public func poilabsPositioning(didFindBeacon uuid: Swift.String, major: Swift.String, minor: Swift.String)
  @objc dynamic public func poilabsPositioning(didFail error: PoilabsPositioning.PoilabsPositioningError)
  @objc dynamic public func poilabsPositioning(didUpdateHeading heading: CoreLocation.CLHeading)
}
public struct PLCategory : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ChildBase : Swift.Codable {
  public let status: Swift.Int
  public let data: [PoilabsVdNavigationCore.Child]
  public var map: PoilabsVdNavigationCore.Map {
    get
  }
  public var allPointsForMap: [PoilabsVdNavigationCore.Poi] {
    get
  }
  public var mainGraph: PoilabsVdNavigationCore.PESGraph {
    get
  }
  public var disableGraph: PoilabsVdNavigationCore.PESGraph {
    get
  }
  public func getSameLevelPoisGraph(floorLevel: Swift.Int) -> PoilabsVdNavigationCore.PESGraph
  public var placeTitle: Swift.String {
    get
  }
  public var placeDescription: Swift.String {
    get
  }
  public var facilities: [PoilabsVdNavigationCore.Facility] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Child : Swift.Codable {
  public let isActive: Swift.Bool?
  public let filters: PoilabsVdNavigationCore.Filter
  public let map: PoilabsVdNavigationCore.Map?
  public let title: Swift.String
  public let description: Swift.String?
  public let major: [Swift.Int]?
  public let location: PoilabsVdNavigationCore.Location
  public let conversionFactor: Swift.Double?
  public let type: Swift.String?
  public let createdAt: Swift.Int?
  public let id: Swift.String?
  public let facilities: [PoilabsVdNavigationCore.Facility]?
  public let navigation: PoilabsVdNavigationCore.Navigation?
  public let properties: PoilabsVdNavigationCore.ChildProperties?
  public let category: PoilabsVdNavigationCore.PLCategory?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Filter : Swift.Codable {
  public let pointType: [Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Map : Swift.Codable {
  public let vendor: Swift.String
  public let accessToken: Swift.String
  public let styleUrl: Swift.String
  public let floors: [PoilabsVdNavigationCore.Floor]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Floor : Swift.Codable {
  public let title: Swift.String
  public let properties: PoilabsVdNavigationCore.FloorProperties?
  public let level: Swift.Int
  public let mapRotateAngle: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FloorProperties : Swift.Codable {
  public let centerPoint: [Swift.Double]
  public let conversionFactor: Swift.Double?
  public let maxBounds: [[Swift.Double]]
  public let minZoomLevel: Swift.Double
  public let zoomLevel: Swift.Double
  public let maxZoomLevel: Swift.Double
  public var routeConversionFactorDividend: Swift.Double?
  public var conversionFactorDividend: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Location : Swift.Codable {
  public let geometry: PoilabsVdNavigationCore.Geometry
  public let properties: PoilabsVdNavigationCore.LocationProperties?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Geometry : Swift.Codable {
  public let coordinates: [Swift.Double]
  public var locationCoordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LocationProperties : Swift.Codable {
  public let floorLevel: Swift.Int?
  public let shopCenterPoint: [Swift.Double]?
  public var shopCenterPointCoordinates: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Facility : Swift.Codable {
  public let pointType: Swift.String
  public let order: Swift.Int
  public let title: Swift.String
  public let titleEn: Swift.String
  public let iconUrl: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Navigation : Swift.Codable {
  public let properties: PoilabsVdNavigationCore.NavigationProperties?
  public var segments: [PoilabsVdNavigationCore.Segment]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NavigationProperties : Swift.Codable {
  public var isVisOnList: Swift.Bool {
    get
  }
  public var isVisOnMap: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Segment : Swift.Codable {
  public let id: Swift.String
  public let mapWeight: Swift.Double?
  public let weight: Swift.Double?
  public var startPoiId: Swift.String?
  public var finishPoiId: Swift.String?
  public var isAvailableForDisPerson: Swift.Bool {
    get
  }
  public var startNode: PoilabsVdNavigationCore.PESGraphNode? {
    get
  }
  public var finishNode: PoilabsVdNavigationCore.PESGraphNode? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ChildProperties : Swift.Codable {
  public let content: Swift.String?
  public let restrictionWarning: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PlaceBeacons : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Beacon : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Poi {
  public var filters: PoilabsVdNavigationCore.Filter?
  public var properties: PoilabsVdNavigationCore.ChildProperties?
  public var title: Swift.String?
  public var description: Swift.String?
  public var location: PoilabsVdNavigationCore.Location
  public var id: Swift.String?
  public var navigation: PoilabsVdNavigationCore.Navigation?
  public var category: PoilabsVdNavigationCore.PLCategory?
  public var node: PoilabsVdNavigationCore.PESGraphNode? {
    get
  }
  public var coordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var centerPoint: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var floorLevel: Swift.Int? {
    get
  }
  public var categoryName: Swift.String? {
    get
  }
}
extension PoilabsVdNavigationCore.Poi : Swift.Hashable {
  public static func == (lhs: PoilabsVdNavigationCore.Poi, rhs: PoilabsVdNavigationCore.Poi) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Bundle {
  public class var applicationVersionNumber: Swift.String {
    get
  }
}
public struct FullInit : Swift.Codable {
  public let uuid: Swift.String
  public let messagingTime: Swift.Double
  public let beaconCount: Swift.Int, minRssiLimit: Swift.Int
  public let fullInit: Swift.Bool
  public let positioning: PoilabsVdNavigationCore.Positioning
  public let lists: [PoilabsVdNavigationCore.FullInitList]
  public let childsURL: Swift.String
  public let messageURL: Swift.String
  public let topPlaceURL: Swift.String, beaconListURL: Swift.String, placeBeaconsURL: Swift.String
  public let initListURL: Swift.String
  public let menuLevel: Swift.Int
  public var allChilds: [[PoilabsVdNavigationCore.Child]] {
    get
  }
  public var placeBeacons: [PoilabsVdNavigationCore.PlaceBeacons] {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FullInitList : Swift.Codable {
  public let type: Swift.String
  public let excludes: [Swift.String]?
  public let name: PoilabsVdNavigationCore.Name
  public let elements: [PoilabsVdNavigationCore.FullInitElement]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FullInitElement : Swift.Codable {
  public let id: Swift.String, title: Swift.String, description: Swift.String
  public let major: [Swift.Int]?
  public let city: Swift.String, district: Swift.String, address: Swift.String
  public let lon: Swift.Double, lat: Swift.Double
  public let place: PoilabsVdNavigationCore.Child?
  public let points: [PoilabsVdNavigationCore.Child]?
  public let beacons: [PoilabsVdNavigationCore.Beacon]?
  public var allChilds: [PoilabsVdNavigationCore.Child] {
    get
  }
  public var placeBeacons: PoilabsVdNavigationCore.PlaceBeacons? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ConfigData : Swift.Codable {
  public let uuid: Swift.String
  public let messagingTime: Swift.Double
  public let beaconCount: Swift.Int
  public let fullInit: Swift.Bool?
  public let positioning: PoilabsVdNavigationCore.Positioning?
  public let lists: [PoilabsVdNavigationCore.List]
  public let childsURL: Swift.String
  public let messageURL: Swift.String
  public let topPlaceURL: Swift.String, beaconListURL: Swift.String, placeBeaconsURL: Swift.String
  public let initListURL: Swift.String?
  public let menuLevel: Swift.Int
  public var allElements: [PoilabsVdNavigationCore.Element] {
    get
  }
  public var minRSSILimitIOS: Swift.Int? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct List : Swift.Codable {
  public let type: Swift.String
  public let excludes: [Swift.String]?
  public let name: PoilabsVdNavigationCore.Name
  public let elements: [PoilabsVdNavigationCore.Element]
  public let child: PoilabsVdNavigationCore.ListChild?
  public let includes: [Swift.String]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ListChild : Swift.Codable {
  public let type: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Element : Swift.Codable {
  public let id: Swift.String, title: Swift.String, elementDescription: Swift.String
  public let major: [Swift.Int]?
  public let city: Swift.String, district: Swift.String, address: Swift.String
  public let lon: Swift.Double, lat: Swift.Double
  public let childs: [PoilabsVdNavigationCore.ChildElement]?
  public let parents: [Swift.String]?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var childsList: [PoilabsVdNavigationCore.Element]? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ChildElement : Swift.Codable {
  public let id: Swift.String, title: Swift.String, childDescription: Swift.String
  public let major: [Swift.Int]
  public let lon: Swift.Double, lat: Swift.Double
  public let city: Swift.String?, district: Swift.String?, address: Swift.String?
  public func toElement() -> PoilabsVdNavigationCore.Element
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Name : Swift.Codable {
  public let tr: Swift.String, en: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Positioning : Swift.Codable {
  public let beaconScanInterval: Swift.Double, locationUpdateInterval: Swift.Double
  public let requestInterval: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol PoiVDNavigationManagerDelegate {
  func PoiVDNavigationManager(didChangeAuthorization status: Swift.Bool)
  func PoiVDNavigationManager(centralManagerDidUpdateState status: Swift.Bool)
}
public class PoiVDNavigationManager {
  public func navigationManager(didChangeAuthorization status: Swift.Bool)
  public func navigationManager(centralManagerDidUpdateState status: Swift.Bool)
  public var delegate: PoilabsVdNavigationCore.PoiVDNavigationManagerDelegate?
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getMenuLevel() -> Swift.Int
  public func getMenuItems() -> [PoilabsVdNavigationCore.Element]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ItemCategory : Swift.Hashable {
  public static func == (lhs: PoilabsVdNavigationCore.ItemCategory, rhs: PoilabsVdNavigationCore.ItemCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var type: Swift.String
  public var nameTr: Swift.String
  public var nameEn: Swift.String
  public var name: Swift.String {
    get
  }
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class ItemBase {
  public var category: PoilabsVdNavigationCore.ItemCategory
  public var elements: [PoilabsVdNavigationCore.Place]
  required public init?(dictionary: Foundation.NSDictionary)
  public func getElements() -> [PoilabsVdNavigationCore.Place]
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.ItemBase]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Place {
  public var id: Swift.String!
  public var title: Swift.String?
  public var major: [Swift.Int]
  public var address: Swift.String?
  public var lat: Swift.Double?
  public var lon: Swift.Double?
  public var childs: [PoilabsVdNavigationCore.Place]?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var type: PoilabsVdNavigationCore.ItemCategory!
  public class func modelsFromDictionaryArray(array: Foundation.NSArray, type: PoilabsVdNavigationCore.ItemCategory) -> [PoilabsVdNavigationCore.Place]
  required public init?(dictionary: Foundation.NSDictionary, type: PoilabsVdNavigationCore.ItemCategory)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let deviceModelName: Swift.String
}
public enum RouteError {
  case noLocation, noRoute, unknown
  public static func == (a: PoilabsVdNavigationCore.RouteError, b: PoilabsVdNavigationCore.RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SelectedGraph {
  case mainGraph, disableGraph
  public static func == (a: PoilabsVdNavigationCore.SelectedGraph, b: PoilabsVdNavigationCore.SelectedGraph) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FloorPassMethod {
  case elevator, escalator, stairs
  public static func == (a: PoilabsVdNavigationCore.FloorPassMethod, b: PoilabsVdNavigationCore.FloorPassMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteStatus {
  case outOfRoute, arrived, onRoute
  public static func == (a: PoilabsVdNavigationCore.RouteStatus, b: PoilabsVdNavigationCore.RouteStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RouteManagerDelegate {
  func routeManager(floorChangeStep destinationFloor: Swift.Int, by floorPassMethod: PoilabsVdNavigationCore.FloorPassMethod)
  func routeManager(currentUserLocation location: (PoilabsVdNavigationCore.Poi, Swift.Int?))
  func routeManager(error: PoilabsVdNavigationCore.RouteError)
  func routeManager(routeCalculated route: PoilabsVdNavigationCore.PESGraphRoute, target: PoilabsVdNavigationCore.Poi)
  func routeManager(updateCurrentStep meters: Swift.Int, rotation: Swift.Int)
  func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?)
  func routeManager(didUpdate routeStatus: PoilabsVdNavigationCore.RouteStatus)
}
public struct RemainingDistanceItem {
  public let text: Swift.String
  public var argumants: [Swift.Int]
}
public class RouteManager {
  public var delegate: PoilabsVdNavigationCore.RouteManagerDelegate? {
    get
    set
  }
  public init(targetPoi: PoilabsVdNavigationCore.Poi, on graph: PoilabsVdNavigationCore.SelectedGraph)
  public init(type: Swift.String, on graph: PoilabsVdNavigationCore.SelectedGraph)
  public func navigate()
  public func reInitRoute()
  public func getSelectedGraph() -> PoilabsVdNavigationCore.SelectedGraph
  public func getFloorDifferance() -> Swift.Int?
  public func getRouteLength() -> Swift.Int?
  @objc deinit
}
extension PoilabsVdNavigationCore.RouteManager {
  public func getRemainingSteps(firstNSteps: Swift.Int? = nil) -> [PoilabsVdNavigationCore.RemainingDistanceItem]
  public func getRoutePois() -> [PoilabsVdNavigationCore.Poi]
}
extension PoilabsVdNavigationCore.RouteManager : PoilabsVdNavigationCore.PositioningManagerDelegate {
  public func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, heading: CoreLocation.CLHeading)
  public func positioningManager(didUpdateNearByLocations locations: [(PoilabsVdNavigationCore.Poi, Swift.Double, Swift.Int?)])
  public func positioningManager(didStatusChanged status: PoilabsVdNavigationCore.UserLocationStatus)
}
public protocol PlaceListManagerDelegate {
  func placeListLoaded(status: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class PlaceListManager : ObjectiveC.NSObject {
  public var delegate: PoilabsVdNavigationCore.PlaceListManagerDelegate?
  @objc override dynamic public init()
  public func getConfigList() -> [PoilabsVdNavigationCore.List]
  public func getPlaceList() -> [PoilabsVdNavigationCore.Element]
  public func saveConfig(config: PoilabsVdNavigationCore.ConfigData, appId: Swift.String, lang: Swift.String)
  public func getConfig(appId: Swift.String, lang: Swift.String) -> PoilabsVdNavigationCore.ConfigData?
  public func getPlaceFilteredList() -> [PoilabsVdNavigationCore.Element]?
  public func getCategories() -> [PoilabsVdNavigationCore.ItemCategory]
  public func searchPlaceFilteredList(withQuery query: Swift.String? = "") -> [PoilabsVdNavigationCore.Element]?
  @objc deinit
}
extension PoilabsVdNavigationCore.PlaceListManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
@_hasMissingDesignatedInitializers public class StoreListManager {
  public init(placeId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  public func getInfoText() -> Swift.String
  public func getStoreList() -> [PoilabsVdNavigationCore.Poi]
  public func getCategories() -> [Swift.String]
  public func getFacilities() -> [PoilabsVdNavigationCore.Facility]
  @objc deinit
}
public class PointDetailManager {
  public init(target: PoilabsVdNavigationCore.Poi)
  public func getFloorLevel() -> Swift.String
  @objc deinit
}
extension PoilabsVdNavigationCore.PMError : Swift.Equatable {}
extension PoilabsVdNavigationCore.PMError : Swift.Hashable {}
extension PoilabsVdNavigationCore.UserLocationStatus : Swift.Equatable {}
extension PoilabsVdNavigationCore.UserLocationStatus : Swift.Hashable {}
extension PoilabsVdNavigationCore.RouteError : Swift.Equatable {}
extension PoilabsVdNavigationCore.RouteError : Swift.Hashable {}
extension PoilabsVdNavigationCore.SelectedGraph : Swift.Equatable {}
extension PoilabsVdNavigationCore.SelectedGraph : Swift.Hashable {}
extension PoilabsVdNavigationCore.FloorPassMethod : Swift.Equatable {}
extension PoilabsVdNavigationCore.FloorPassMethod : Swift.Hashable {}
extension PoilabsVdNavigationCore.RouteStatus : Swift.Equatable {}
extension PoilabsVdNavigationCore.RouteStatus : Swift.Hashable {}
