// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PoilabsVdNavigationCore
import CoreLocation
import Dispatch
import Foundation
import MobileCoreServices
import PoilabsCore
import PoilabsPositioning
import PoilabsSdkAnalytics
@_exported import PoilabsVdNavigationCore
import Swift
import SystemConfiguration
import UIKit
import _Concurrency
public struct Timeline {
  public let requestStartTime: CoreFoundation.CFAbsoluteTime
  public let initialResponseTime: CoreFoundation.CFAbsoluteTime
  public let requestCompletedTime: CoreFoundation.CFAbsoluteTime
  public let serializationCompletedTime: CoreFoundation.CFAbsoluteTime
  public let latency: Foundation.TimeInterval
  public let requestDuration: Foundation.TimeInterval
  public let serializationDuration: Foundation.TimeInterval
  public let totalDuration: Foundation.TimeInterval
  public init(requestStartTime: CoreFoundation.CFAbsoluteTime = 0.0, initialResponseTime: CoreFoundation.CFAbsoluteTime = 0.0, requestCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0, serializationCompletedTime: CoreFoundation.CFAbsoluteTime = 0.0)
}
extension PoilabsVdNavigationCore.Timeline : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension PoilabsVdNavigationCore.Timeline : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers open class NetworkReachabilityManager {
  public enum NetworkReachabilityStatus {
    case unknown
    case notReachable
    case reachable(PoilabsVdNavigationCore.NetworkReachabilityManager.ConnectionType)
  }
  public enum ConnectionType {
    case ethernetOrWiFi
    case wwan
    public static func == (a: PoilabsVdNavigationCore.NetworkReachabilityManager.ConnectionType, b: PoilabsVdNavigationCore.NetworkReachabilityManager.ConnectionType) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public typealias Listener = (PoilabsVdNavigationCore.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Void
  open var isReachable: Swift.Bool {
    get
  }
  open var isReachableOnWWAN: Swift.Bool {
    get
  }
  open var isReachableOnEthernetOrWiFi: Swift.Bool {
    get
  }
  open var networkReachabilityStatus: PoilabsVdNavigationCore.NetworkReachabilityManager.NetworkReachabilityStatus {
    get
  }
  open var listenerQueue: Dispatch.DispatchQueue
  open var listener: PoilabsVdNavigationCore.NetworkReachabilityManager.Listener?
  open var flags: SystemConfiguration.SCNetworkReachabilityFlags? {
    get
  }
  open var previousFlags: SystemConfiguration.SCNetworkReachabilityFlags
  convenience public init?(host: Swift.String)
  convenience public init?()
  @objc deinit
  @discardableResult
  open func startListening() -> Swift.Bool
  open func stopListening()
}
extension PoilabsVdNavigationCore.NetworkReachabilityManager.NetworkReachabilityStatus : Swift.Equatable {
}
public func == (lhs: PoilabsVdNavigationCore.NetworkReachabilityManager.NetworkReachabilityStatus, rhs: PoilabsVdNavigationCore.NetworkReachabilityManager.NetworkReachabilityStatus) -> Swift.Bool
public struct Guide : Swift.Codable {
  public let image: Swift.String?
  public let title: Swift.String
  public let subtitle: Swift.String?
  public let content: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public enum Result<Value> {
  case success(Value)
  case failure(Swift.Error)
  public var isSuccess: Swift.Bool {
    get
  }
  public var isFailure: Swift.Bool {
    get
  }
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension PoilabsVdNavigationCore.Result : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension PoilabsVdNavigationCore.Result : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension PoilabsVdNavigationCore.Result {
  public init(value: () throws -> Value)
  public func unwrap() throws -> Value
  public func map<T>(_ transform: (Value) -> T) -> PoilabsVdNavigationCore.Result<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> PoilabsVdNavigationCore.Result<T>
  public func mapError<T>(_ transform: (Swift.Error) -> T) -> PoilabsVdNavigationCore.Result<Value> where T : Swift.Error
  public func flatMapError<T>(_ transform: (Swift.Error) throws -> T) -> PoilabsVdNavigationCore.Result<Value> where T : Swift.Error
  @discardableResult
  public func withValue(_ closure: (Value) throws -> Swift.Void) rethrows -> PoilabsVdNavigationCore.Result<Value>
  @discardableResult
  public func withError(_ closure: (Swift.Error) throws -> Swift.Void) rethrows -> PoilabsVdNavigationCore.Result<Value>
  @discardableResult
  public func ifSuccess(_ closure: () throws -> Swift.Void) rethrows -> PoilabsVdNavigationCore.Result<Value>
  @discardableResult
  public func ifFailure(_ closure: () throws -> Swift.Void) rethrows -> PoilabsVdNavigationCore.Result<Value>
}
public protocol PositioningManagerDelegate {
  func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, heading: CoreLocation.CLHeading)
  func positioningManager(didUpdateNearByLocations locations: [(PoilabsVdNavigationCore.Poi, Swift.Double, Swift.Int?)])
  func positioningManager(didStatusChanged status: PoilabsVdNavigationCore.UserLocationStatus)
}
public protocol PositioninManagerErrorDelegate {
  func positioningManager(didFail error: PoilabsVdNavigationCore.PMError)
  func positioningManagerDidStart()
}
public enum PMError {
  case location
  case bluetooth
  public static func == (a: PoilabsVdNavigationCore.PMError, b: PoilabsVdNavigationCore.PMError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UserLocationStatus {
  case waiting
  case notFound
  case found
  case arrived
  public static func == (a: PoilabsVdNavigationCore.UserLocationStatus, b: PoilabsVdNavigationCore.UserLocationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PositioningManager : ObjectiveC.NSObject {
  public var delegate: PoilabsVdNavigationCore.PositioningManagerDelegate? {
    get
    set
  }
  public var errorDelegate: PoilabsVdNavigationCore.PositioninManagerErrorDelegate?
  public static let shared: PoilabsVdNavigationCore.PositioningManager
  public func startPositioning()
  public func stopPositioning()
  public func getPlaceTitle() -> Swift.String
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  public func getCurrentLocationDistanceLimit() -> Swift.Int
  public func getCurrentLocationDistanceLimit() -> Swift.Double
  @objc override dynamic public init()
  @objc deinit
}
extension PoilabsVdNavigationCore.PositioningManager : PoilabsPositioning.PoilabsPositioningDelegate {
  @objc dynamic public func poilabsPositioning(didThresholdChange threshold: Swift.Int)
  @objc dynamic public func poilabsPositioning(didUpdateLocation location: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, accuracy: Swift.Double)
  @objc dynamic public func poilabsPositioningDidStart()
  @objc dynamic public func poilabsPositioning(didStatusChange status: PoilabsPositioning.PLPStatus, reason: PoilabsPositioning.PLPLocationStatusReason)
  @objc dynamic public func poilabsPositioning(didFindBeacon uuid: Swift.String, major: Swift.String, minor: Swift.String)
  @objc dynamic public func poilabsPositioning(didFail error: PoilabsPositioning.PoilabsPositioningError)
  @objc dynamic public func poilabsPositioning(didUpdateHeading heading: CoreLocation.CLHeading)
}
public protocol RequestAdapter {
  func adapt(_ urlRequest: Foundation.URLRequest) throws -> Foundation.URLRequest
}
public typealias RequestRetryCompletion = (_ shouldRetry: Swift.Bool, _ timeDelay: Foundation.TimeInterval) -> Swift.Void
public protocol RequestRetrier {
  func should(_ manager: PoilabsVdNavigationCore.SessionManager, retry request: PoilabsVdNavigationCore.Request, with error: Swift.Error, completion: @escaping PoilabsVdNavigationCore.RequestRetryCompletion)
}
public typealias HTTPHeaders = [Swift.String : Swift.String]
@_hasMissingDesignatedInitializers open class Request {
  public typealias ProgressHandler = (Foundation.Progress) -> Swift.Void
  open var delegate: PoilabsVdNavigationCore.TaskDelegate {
    get
  }
  open var task: Foundation.URLSessionTask? {
    get
  }
  final public let session: Foundation.URLSession
  open var request: Foundation.URLRequest? {
    get
  }
  open var response: Foundation.HTTPURLResponse? {
    get
  }
  open var retryCount: Swift.UInt {
    get
  }
  @discardableResult
  open func authenticate(user: Swift.String, password: Swift.String, persistence: Foundation.URLCredential.Persistence = .forSession) -> Self
  @discardableResult
  open func authenticate(usingCredential credential: Foundation.URLCredential) -> Self
  open class func authorizationHeader(user: Swift.String, password: Swift.String) -> (key: Swift.String, value: Swift.String)?
  open func resume()
  open func suspend()
  open func cancel()
  @objc deinit
}
extension PoilabsVdNavigationCore.Request : Swift.CustomStringConvertible {
  open var description: Swift.String {
    get
  }
}
extension PoilabsVdNavigationCore.Request : Swift.CustomDebugStringConvertible {
  open var debugDescription: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataRequest : PoilabsVdNavigationCore.Request {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  @discardableResult
  open func stream(closure: ((Foundation.Data) -> Swift.Void)? = nil) -> Self
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping PoilabsVdNavigationCore.DataRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DownloadRequest : PoilabsVdNavigationCore.Request {
  public struct DownloadOptions : Swift.OptionSet {
    public let rawValue: Swift.UInt
    public static let createIntermediateDirectories: PoilabsVdNavigationCore.DownloadRequest.DownloadOptions
    public static let removePreviousFile: PoilabsVdNavigationCore.DownloadRequest.DownloadOptions
    public init(rawValue: Swift.UInt)
    public typealias ArrayLiteralElement = PoilabsVdNavigationCore.DownloadRequest.DownloadOptions
    public typealias Element = PoilabsVdNavigationCore.DownloadRequest.DownloadOptions
    public typealias RawValue = Swift.UInt
  }
  public typealias DownloadFileDestination = (_ temporaryURL: Foundation.URL, _ response: Foundation.HTTPURLResponse) -> (destinationURL: Foundation.URL, options: PoilabsVdNavigationCore.DownloadRequest.DownloadOptions)
  override open var request: Foundation.URLRequest? {
    get
  }
  open var resumeData: Foundation.Data? {
    get
  }
  open var progress: Foundation.Progress {
    get
  }
  override open func cancel()
  open func cancel(createResumeData: Swift.Bool)
  @discardableResult
  open func downloadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping PoilabsVdNavigationCore.DownloadRequest.ProgressHandler) -> Self
  open class func suggestedDownloadDestination(for directory: Foundation.FileManager.SearchPathDirectory = .documentDirectory, in domain: Foundation.FileManager.SearchPathDomainMask = .userDomainMask) -> PoilabsVdNavigationCore.DownloadRequest.DownloadFileDestination
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UploadRequest : PoilabsVdNavigationCore.DataRequest {
  override open var request: Foundation.URLRequest? {
    get
  }
  open var uploadProgress: Foundation.Progress {
    get
  }
  @discardableResult
  open func uploadProgress(queue: Dispatch.DispatchQueue = DispatchQueue.main, closure: @escaping PoilabsVdNavigationCore.UploadRequest.ProgressHandler) -> Self
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
open class StreamRequest : PoilabsVdNavigationCore.Request {
  @objc deinit
}
public struct FloorProperties : Swift.Codable {
  public let conversionFactor: Swift.Double?
  public var conversionFactorDividend: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Location : Swift.Codable {
  public let geometry: PoilabsVdNavigationCore.Geometry
  public let properties: PoilabsVdNavigationCore.LocationProperties?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Geometry : Swift.Codable {
  public let coordinates: [Swift.Double]
  public var locationCoordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LocationProperties : Swift.Codable {
  public let floorLevel: Swift.Int?
  public let shopCenterPoint: [Swift.Double]?
  public var shopCenterPointCoordinates: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Facility : Swift.Codable {
  public let pointType: Swift.String
  public let order: Swift.Int
  public let title: Swift.String
  public let titleEn: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Navigation : Swift.Codable {
  public let properties: PoilabsVdNavigationCore.NavigationProperties?
  public var segments: [PoilabsVdNavigationCore.Segment]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NavigationProperties : Swift.Codable {
  public var privilegedRouteBuffer: Swift.Int {
    get
  }
  public var isPrivilaged: Swift.Bool {
    get
  }
  public var isVisOnList: Swift.Bool {
    get
  }
  public var isVisOnMap: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Segment : Swift.Codable {
  public let id: Swift.String
  public let routeWeight: Swift.Double?
  public let weight: Swift.Double?
  public var startPoiId: Swift.String?
  public var finishPoiId: Swift.String?
  public var isAvailableForDisPerson: Swift.Bool {
    get
  }
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct ChildProperties : Swift.Codable {
  public let content: Swift.String?
  public var restrictionWarning: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PlaceBeacons : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Beacon : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Poi : Swift.Codable {
  public var properties: PoilabsVdNavigationCore.ChildProperties?
  public var title: Swift.String
  public var id: Swift.String?
  public var navigation: PoilabsVdNavigationCore.Navigation?
  public let tags: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public var coordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var centerPoint: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var floorLevel: Swift.Int? {
    get
  }
  public var categoryOrSubcategoryName: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
extension PoilabsVdNavigationCore.Poi : Swift.Hashable {
  public static func == (lhs: PoilabsVdNavigationCore.Poi, rhs: PoilabsVdNavigationCore.Poi) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class SessionDelegate : ObjectiveC.NSObject {
  open var sessionDidBecomeInvalidWithError: ((Foundation.URLSession, Swift.Error?) -> Swift.Void)?
  open var sessionDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var sessionDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var sessionDidFinishEventsForBackgroundURLSession: ((Foundation.URLSession) -> Swift.Void)?
  open var taskWillPerformHTTPRedirection: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest) -> Foundation.URLRequest?)?
  open var taskWillPerformHTTPRedirectionWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.HTTPURLResponse, Foundation.URLRequest, @escaping (Foundation.URLRequest?) -> Swift.Void) -> Swift.Void)?
  open var taskDidReceiveChallenge: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge) -> (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?))?
  open var taskDidReceiveChallengeWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, Foundation.URLAuthenticationChallenge, @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void) -> Swift.Void)?
  open var taskNeedNewBodyStream: ((Foundation.URLSession, Foundation.URLSessionTask) -> Foundation.InputStream?)?
  open var taskNeedNewBodyStreamWithCompletion: ((Foundation.URLSession, Foundation.URLSessionTask, @escaping (Foundation.InputStream?) -> Swift.Void) -> Swift.Void)?
  open var taskDidSendBodyData: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var taskDidComplete: ((Foundation.URLSession, Foundation.URLSessionTask, Swift.Error?) -> Swift.Void)?
  open var dataTaskDidReceiveResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse) -> Foundation.URLSession.ResponseDisposition)?
  open var dataTaskDidReceiveResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLResponse, @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void) -> Swift.Void)?
  open var dataTaskDidBecomeDownloadTask: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.URLSessionDownloadTask) -> Swift.Void)?
  open var dataTaskDidReceiveData: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.Data) -> Swift.Void)?
  open var dataTaskWillCacheResponse: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse) -> Foundation.CachedURLResponse?)?
  open var dataTaskWillCacheResponseWithCompletion: ((Foundation.URLSession, Foundation.URLSessionDataTask, Foundation.CachedURLResponse, @escaping (Foundation.CachedURLResponse?) -> Swift.Void) -> Swift.Void)?
  open var downloadTaskDidFinishDownloadingToURL: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Foundation.URL) -> Swift.Void)?
  open var downloadTaskDidWriteData: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64, Swift.Int64) -> Swift.Void)?
  open var downloadTaskDidResumeAtOffset: ((Foundation.URLSession, Foundation.URLSessionDownloadTask, Swift.Int64, Swift.Int64) -> Swift.Void)?
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskReadClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskWriteClosed: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskBetterRouteDiscovered: ((Foundation.URLSession, Foundation.URLSessionStreamTask) -> Swift.Void)? {
    get
    set
  }
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  open var streamTaskDidBecomeInputAndOutputStreams: ((Foundation.URLSession, Foundation.URLSessionStreamTask, Foundation.InputStream, Foundation.OutputStream) -> Swift.Void)? {
    get
    set
  }
  open subscript(task: Foundation.URLSessionTask) -> PoilabsVdNavigationCore.Request? {
    get
    set
  }
  @objc override dynamic public init()
  @objc override dynamic open func responds(to selector: ObjectiveC.Selector) -> Swift.Bool
  @objc deinit
}
extension PoilabsVdNavigationCore.SessionDelegate : Foundation.URLSessionDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didBecomeInvalidWithError error: Swift.Error?)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSessionDidFinishEvents(forBackgroundURLSession session: Foundation.URLSession)
}
extension PoilabsVdNavigationCore.SessionDelegate : Foundation.URLSessionTaskDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, willPerformHTTPRedirection response: Foundation.HTTPURLResponse, newRequest request: Foundation.URLRequest, completionHandler: @escaping (Foundation.URLRequest?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didReceive challenge: Foundation.URLAuthenticationChallenge, completionHandler: @escaping (Foundation.URLSession.AuthChallengeDisposition, Foundation.URLCredential?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, needNewBodyStream completionHandler: @escaping (Foundation.InputStream?) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
  @objc(URLSession:task:didFinishCollectingMetrics:) dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didFinishCollecting metrics: Foundation.URLSessionTaskMetrics)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
}
extension PoilabsVdNavigationCore.SessionDelegate : Foundation.URLSessionDataDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive response: Foundation.URLResponse, completionHandler: @escaping (Foundation.URLSession.ResponseDisposition) -> Swift.Void)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didBecome downloadTask: Foundation.URLSessionDownloadTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, willCacheResponse proposedResponse: Foundation.CachedURLResponse, completionHandler: @escaping (Foundation.CachedURLResponse?) -> Swift.Void)
}
extension PoilabsVdNavigationCore.SessionDelegate : Foundation.URLSessionDownloadDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didFinishDownloadingTo location: Foundation.URL)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didWriteData bytesWritten: Swift.Int64, totalBytesWritten: Swift.Int64, totalBytesExpectedToWrite: Swift.Int64)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, downloadTask: Foundation.URLSessionDownloadTask, didResumeAtOffset fileOffset: Swift.Int64, expectedTotalBytes: Swift.Int64)
}
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
extension PoilabsVdNavigationCore.SessionDelegate : Foundation.URLSessionStreamDelegate {
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, readClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, writeClosedFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, betterRouteDiscoveredFor streamTask: Foundation.URLSessionStreamTask)
  @objc dynamic open func urlSession(_ session: Foundation.URLSession, streamTask: Foundation.URLSessionStreamTask, didBecome inputStream: Foundation.InputStream, outputStream: Foundation.OutputStream)
}
public class UserGuideManager {
  public init()
  public func getPoilabsVdNavigationVersionNumber() -> Swift.String
  public func getUserGuideItems() -> [PoilabsVdNavigationCore.Guide]
  public var contactEmail: Swift.String {
    get
  }
  @objc deinit
}
public enum AFError : Swift.Error {
  public enum ParameterEncodingFailureReason {
    case missingURL
    case jsonEncodingFailed(error: Swift.Error)
    case propertyListEncodingFailed(error: Swift.Error)
  }
  public enum MultipartEncodingFailureReason {
    case bodyPartURLInvalid(url: Foundation.URL)
    case bodyPartFilenameInvalid(in: Foundation.URL)
    case bodyPartFileNotReachable(at: Foundation.URL)
    case bodyPartFileNotReachableWithError(atURL: Foundation.URL, error: Swift.Error)
    case bodyPartFileIsDirectory(at: Foundation.URL)
    case bodyPartFileSizeNotAvailable(at: Foundation.URL)
    case bodyPartFileSizeQueryFailedWithError(forURL: Foundation.URL, error: Swift.Error)
    case bodyPartInputStreamCreationFailed(for: Foundation.URL)
    case outputStreamCreationFailed(for: Foundation.URL)
    case outputStreamFileAlreadyExists(at: Foundation.URL)
    case outputStreamURLInvalid(url: Foundation.URL)
    case outputStreamWriteFailed(error: Swift.Error)
    case inputStreamReadFailed(error: Swift.Error)
  }
  public enum ResponseValidationFailureReason {
    case dataFileNil
    case dataFileReadFailed(at: Foundation.URL)
    case missingContentType(acceptableContentTypes: [Swift.String])
    case unacceptableContentType(acceptableContentTypes: [Swift.String], responseContentType: Swift.String)
    case unacceptableStatusCode(code: Swift.Int)
  }
  public enum ResponseSerializationFailureReason {
    case inputDataNil
    case inputDataNilOrZeroLength
    case inputFileNil
    case inputFileReadFailed(at: Foundation.URL)
    case stringSerializationFailed(encoding: Swift.String.Encoding)
    case jsonSerializationFailed(error: Swift.Error)
    case propertyListSerializationFailed(error: Swift.Error)
  }
  case invalidURL(url: PoilabsVdNavigationCore.URLConvertible)
  case parameterEncodingFailed(reason: PoilabsVdNavigationCore.AFError.ParameterEncodingFailureReason)
  case multipartEncodingFailed(reason: PoilabsVdNavigationCore.AFError.MultipartEncodingFailureReason)
  case responseValidationFailed(reason: PoilabsVdNavigationCore.AFError.ResponseValidationFailureReason)
  case responseSerializationFailed(reason: PoilabsVdNavigationCore.AFError.ResponseSerializationFailureReason)
}
extension PoilabsVdNavigationCore.AFError {
  public var isInvalidURLError: Swift.Bool {
    get
  }
  public var isParameterEncodingError: Swift.Bool {
    get
  }
  public var isMultipartEncodingError: Swift.Bool {
    get
  }
  public var isResponseValidationError: Swift.Bool {
    get
  }
  public var isResponseSerializationError: Swift.Bool {
    get
  }
}
extension PoilabsVdNavigationCore.AFError {
  public var urlConvertible: PoilabsVdNavigationCore.URLConvertible? {
    get
  }
  public var url: Foundation.URL? {
    get
  }
  public var underlyingError: Swift.Error? {
    get
  }
  public var acceptableContentTypes: [Swift.String]? {
    get
  }
  public var responseContentType: Swift.String? {
    get
  }
  public var responseCode: Swift.Int? {
    get
  }
  public var failedStringEncoding: Swift.String.Encoding? {
    get
  }
}
extension PoilabsVdNavigationCore.AFError : Foundation.LocalizedError {
  public var errorDescription: Swift.String? {
    get
  }
}
public struct ConfigData : Swift.Codable {
  public let uuid: Swift.String
  public let messagingTime: Swift.Double
  public let fullInit: Swift.Bool?
  public let lists: [PoilabsVdNavigationCore.List]
  public let menuLevel: Swift.Int
  public let guide: [PoilabsVdNavigationCore.Guide]
  public init(from decoder: Swift.Decoder) throws
  public var allElements: [PoilabsVdNavigationCore.Element] {
    get
  }
  public var minRSSILimitIOS: Swift.Int? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public struct List : Swift.Codable {
  public let type: Swift.String
  public let title: Swift.String
  public let elements: [PoilabsVdNavigationCore.Element]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Element : Swift.Codable {
  public let id: Swift.String, title: Swift.String
  public let major: [Swift.Int]?
  public let address: Swift.String?
  public let lon: Swift.Double, lat: Swift.Double
  public let childs: [PoilabsVdNavigationCore.Element]?
  public init(from decoder: Swift.Decoder) throws
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var childsList: [PoilabsVdNavigationCore.Element]? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol PoiVDNavigationManagerDelegate {
  func poiVdNavigationManager(didUpdate userLocation: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, floorName: Swift.String)
}
public struct PoiVdNavigationManagerSettings {
  public let usedLanguages: [Swift.String]
  public let usedFloorChangeMethods: [Swift.String]
}
public class PoiVDNavigationManager {
  public var delegate: PoilabsVdNavigationCore.PoiVDNavigationManagerDelegate?
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, completionHandler: @escaping (Swift.Result<PoilabsVdNavigationCore.PoiVdNavigationManagerSettings, Swift.Error>) -> Swift.Void)
  public func sdkRemoved()
  public func getMenuLevel() -> Swift.Int
  public func getMenuItems() -> [PoilabsVdNavigationCore.Element]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ItemCategory : Swift.Hashable {
  public static func == (lhs: PoilabsVdNavigationCore.ItemCategory, rhs: PoilabsVdNavigationCore.ItemCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  final public let type: Swift.String
  final public let name: Swift.String
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ItemBase {
  public var category: PoilabsVdNavigationCore.ItemCategory
  public var elements: [PoilabsVdNavigationCore.Place]
  public func getElements() -> [PoilabsVdNavigationCore.Place]
  @objc deinit
}
open class SessionManager {
  public enum MultipartFormDataEncodingResult {
    case success(request: PoilabsVdNavigationCore.UploadRequest, streamingFromDisk: Swift.Bool, streamFileURL: Foundation.URL?)
    case failure(Swift.Error)
  }
  public static let `default`: PoilabsVdNavigationCore.SessionManager
  public static let defaultHTTPHeaders: PoilabsVdNavigationCore.HTTPHeaders
  public static let multipartFormDataEncodingMemoryThreshold: Swift.UInt64
  final public let session: Foundation.URLSession
  final public let delegate: PoilabsVdNavigationCore.SessionDelegate
  open var startRequestsImmediately: Swift.Bool
  open var adapter: PoilabsVdNavigationCore.RequestAdapter?
  open var retrier: PoilabsVdNavigationCore.RequestRetrier? {
    get
    set
  }
  open var backgroundCompletionHandler: (() -> Swift.Void)?
  public init(configuration: Foundation.URLSessionConfiguration = URLSessionConfiguration.default, delegate: PoilabsVdNavigationCore.SessionDelegate = SessionDelegate(), serverTrustPolicyManager: PoilabsVdNavigationCore.ServerTrustPolicyManager? = nil)
  public init?(session: Foundation.URLSession, delegate: PoilabsVdNavigationCore.SessionDelegate, serverTrustPolicyManager: PoilabsVdNavigationCore.ServerTrustPolicyManager? = nil)
  @objc deinit
  @discardableResult
  open func request(_ url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .get, parameters: PoilabsVdNavigationCore.Parameters? = nil, encoding: PoilabsVdNavigationCore.ParameterEncoding = URLEncoding.default, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.DataRequest
  @discardableResult
  open func request(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.DataRequest
  @discardableResult
  open func download(_ url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .get, parameters: PoilabsVdNavigationCore.Parameters? = nil, encoding: PoilabsVdNavigationCore.ParameterEncoding = URLEncoding.default, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil, to destination: PoilabsVdNavigationCore.DownloadRequest.DownloadFileDestination? = nil) -> PoilabsVdNavigationCore.DownloadRequest
  @discardableResult
  open func download(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, to destination: PoilabsVdNavigationCore.DownloadRequest.DownloadFileDestination? = nil) -> PoilabsVdNavigationCore.DownloadRequest
  @discardableResult
  open func download(resumingWith resumeData: Foundation.Data, to destination: PoilabsVdNavigationCore.DownloadRequest.DownloadFileDestination? = nil) -> PoilabsVdNavigationCore.DownloadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.UploadRequest
  @discardableResult
  open func upload(_ fileURL: Foundation.URL, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.UploadRequest
  @discardableResult
  open func upload(_ data: Foundation.Data, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.UploadRequest
  @discardableResult
  open func upload(_ stream: Foundation.InputStream, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.UploadRequest
  open func upload(multipartFormData: @escaping (PoilabsVdNavigationCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((PoilabsVdNavigationCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  open func upload(multipartFormData: @escaping (PoilabsVdNavigationCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, queue: Dispatch.DispatchQueue? = nil, encodingCompletion: ((PoilabsVdNavigationCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(withHostName hostName: Swift.String, port: Swift.Int) -> PoilabsVdNavigationCore.StreamRequest
  @available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
  @discardableResult
  open func stream(with netService: Foundation.NetService) -> PoilabsVdNavigationCore.StreamRequest
}
@objc @_hasMissingDesignatedInitializers open class TaskDelegate : ObjectiveC.NSObject {
  final public let queue: Foundation.OperationQueue
  public var data: Foundation.Data? {
    get
  }
  public var error: Swift.Error?
  @objc deinit
}
extension PoilabsVdNavigationCore.Request {
  public enum ValidationResult {
    case success
    case failure(Swift.Error)
  }
}
extension PoilabsVdNavigationCore.DataRequest {
  public typealias Validation = (Foundation.URLRequest?, Foundation.HTTPURLResponse, Foundation.Data?) -> PoilabsVdNavigationCore.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping PoilabsVdNavigationCore.DataRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
extension PoilabsVdNavigationCore.DownloadRequest {
  public typealias Validation = (_ request: Foundation.URLRequest?, _ response: Foundation.HTTPURLResponse, _ temporaryURL: Foundation.URL?, _ destinationURL: Foundation.URL?) -> PoilabsVdNavigationCore.Request.ValidationResult
  @discardableResult
  public func validate(_ validation: @escaping PoilabsVdNavigationCore.DownloadRequest.Validation) -> Self
  @discardableResult
  public func validate<S>(statusCode acceptableStatusCodes: S) -> Self where S : Swift.Sequence, S.Element == Swift.Int
  @discardableResult
  public func validate<S>(contentType acceptableContentTypes: S) -> Self where S : Swift.Sequence, S.Element == Swift.String
  @discardableResult
  public func validate() -> Self
}
open class ServerTrustPolicyManager {
  final public let policies: [Swift.String : PoilabsVdNavigationCore.ServerTrustPolicy]
  public init(policies: [Swift.String : PoilabsVdNavigationCore.ServerTrustPolicy])
  open func serverTrustPolicy(forHost host: Swift.String) -> PoilabsVdNavigationCore.ServerTrustPolicy?
  @objc deinit
}
public enum ServerTrustPolicy {
  case performDefaultEvaluation(validateHost: Swift.Bool)
  case performRevokedEvaluation(validateHost: Swift.Bool, revocationFlags: CoreFoundation.CFOptionFlags)
  case pinCertificates(certificates: [Security.SecCertificate], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case pinPublicKeys(publicKeys: [Security.SecKey], validateCertificateChain: Swift.Bool, validateHost: Swift.Bool)
  case disableEvaluation
  case customEvaluation((_ serverTrust: Security.SecTrust, _ host: Swift.String) -> Swift.Bool)
  public static func certificates(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecCertificate]
  public static func publicKeys(in bundle: Foundation.Bundle = Bundle.main) -> [Security.SecKey]
  public func evaluate(_ serverTrust: Security.SecTrust, forHost host: Swift.String) -> Swift.Bool
}
public struct DefaultDataResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: PoilabsVdNavigationCore.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?, timeline: PoilabsVdNavigationCore.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DataResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let data: Foundation.Data?
  public let result: PoilabsVdNavigationCore.Result<Value>
  public let timeline: PoilabsVdNavigationCore.Timeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, result: PoilabsVdNavigationCore.Result<Value>, timeline: PoilabsVdNavigationCore.Timeline = Timeline())
}
extension PoilabsVdNavigationCore.DataResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension PoilabsVdNavigationCore.DataResponse {
  public func map<T>(_ transform: (Value) -> T) -> PoilabsVdNavigationCore.DataResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> PoilabsVdNavigationCore.DataResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> PoilabsVdNavigationCore.DataResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> PoilabsVdNavigationCore.DataResponse<Value> where E : Swift.Error
}
public struct DefaultDownloadResponse {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let error: Swift.Error?
  public let timeline: PoilabsVdNavigationCore.Timeline
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, error: Swift.Error?, timeline: PoilabsVdNavigationCore.Timeline = Timeline(), metrics: Swift.AnyObject? = nil)
}
public struct DownloadResponse<Value> {
  public let request: Foundation.URLRequest?
  public let response: Foundation.HTTPURLResponse?
  public let temporaryURL: Foundation.URL?
  public let destinationURL: Foundation.URL?
  public let resumeData: Foundation.Data?
  public let result: PoilabsVdNavigationCore.Result<Value>
  public let timeline: PoilabsVdNavigationCore.Timeline
  public var value: Value? {
    get
  }
  public var error: Swift.Error? {
    get
  }
  public init(request: Foundation.URLRequest?, response: Foundation.HTTPURLResponse?, temporaryURL: Foundation.URL?, destinationURL: Foundation.URL?, resumeData: Foundation.Data?, result: PoilabsVdNavigationCore.Result<Value>, timeline: PoilabsVdNavigationCore.Timeline = Timeline())
}
extension PoilabsVdNavigationCore.DownloadResponse : Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible {
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
}
extension PoilabsVdNavigationCore.DownloadResponse {
  public func map<T>(_ transform: (Value) -> T) -> PoilabsVdNavigationCore.DownloadResponse<T>
  public func flatMap<T>(_ transform: (Value) throws -> T) -> PoilabsVdNavigationCore.DownloadResponse<T>
  public func mapError<E>(_ transform: (Swift.Error) -> E) -> PoilabsVdNavigationCore.DownloadResponse<Value> where E : Swift.Error
  public func flatMapError<E>(_ transform: (Swift.Error) throws -> E) -> PoilabsVdNavigationCore.DownloadResponse<Value> where E : Swift.Error
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension PoilabsVdNavigationCore.DefaultDataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension PoilabsVdNavigationCore.DataResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension PoilabsVdNavigationCore.DefaultDownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
@available(iOS 10.0, macOS 10.12, tvOS 10.0, *)
extension PoilabsVdNavigationCore.DownloadResponse {
  public var metrics: Foundation.URLSessionTaskMetrics? {
    get
  }
}
public protocol DataResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> PoilabsVdNavigationCore.Result<Self.SerializedObject> { get }
}
public struct DataResponseSerializer<Value> : PoilabsVdNavigationCore.DataResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> PoilabsVdNavigationCore.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.Data?, Swift.Error?) -> PoilabsVdNavigationCore.Result<Value>)
}
public protocol DownloadResponseSerializerProtocol {
  associatedtype SerializedObject
  var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> PoilabsVdNavigationCore.Result<Self.SerializedObject> { get }
}
public struct DownloadResponseSerializer<Value> : PoilabsVdNavigationCore.DownloadResponseSerializerProtocol {
  public typealias SerializedObject = Value
  public var serializeResponse: (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> PoilabsVdNavigationCore.Result<Value>
  public init(serializeResponse: @escaping (Foundation.URLRequest?, Foundation.HTTPURLResponse?, Foundation.URL?, Swift.Error?) -> PoilabsVdNavigationCore.Result<Value>)
}
extension PoilabsVdNavigationCore.DataRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PoilabsVdNavigationCore.DefaultDataResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (PoilabsVdNavigationCore.DataResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : PoilabsVdNavigationCore.DataResponseSerializerProtocol
}
extension PoilabsVdNavigationCore.DownloadRequest {
  @discardableResult
  public func response(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PoilabsVdNavigationCore.DefaultDownloadResponse) -> Swift.Void) -> Self
  @discardableResult
  public func response<T>(queue: Dispatch.DispatchQueue? = nil, responseSerializer: T, completionHandler: @escaping (PoilabsVdNavigationCore.DownloadResponse<T.SerializedObject>) -> Swift.Void) -> Self where T : PoilabsVdNavigationCore.DownloadResponseSerializerProtocol
}
extension PoilabsVdNavigationCore.Request {
  public static func serializeResponseData(response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PoilabsVdNavigationCore.Result<Foundation.Data>
}
extension PoilabsVdNavigationCore.DataRequest {
  public static func dataResponseSerializer() -> PoilabsVdNavigationCore.DataResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PoilabsVdNavigationCore.DataResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension PoilabsVdNavigationCore.DownloadRequest {
  public static func dataResponseSerializer() -> PoilabsVdNavigationCore.DownloadResponseSerializer<Foundation.Data>
  @discardableResult
  public func responseData(queue: Dispatch.DispatchQueue? = nil, completionHandler: @escaping (PoilabsVdNavigationCore.DownloadResponse<Foundation.Data>) -> Swift.Void) -> Self
}
extension PoilabsVdNavigationCore.Request {
  public static func serializeResponseString(encoding: Swift.String.Encoding?, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PoilabsVdNavigationCore.Result<Swift.String>
}
extension PoilabsVdNavigationCore.DataRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> PoilabsVdNavigationCore.DataResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (PoilabsVdNavigationCore.DataResponse<Swift.String>) -> Swift.Void) -> Self
}
extension PoilabsVdNavigationCore.DownloadRequest {
  public static func stringResponseSerializer(encoding: Swift.String.Encoding? = nil) -> PoilabsVdNavigationCore.DownloadResponseSerializer<Swift.String>
  @discardableResult
  public func responseString(queue: Dispatch.DispatchQueue? = nil, encoding: Swift.String.Encoding? = nil, completionHandler: @escaping (PoilabsVdNavigationCore.DownloadResponse<Swift.String>) -> Swift.Void) -> Self
}
extension PoilabsVdNavigationCore.Request {
  public static func serializeResponseJSON(options: Foundation.JSONSerialization.ReadingOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PoilabsVdNavigationCore.Result<Any>
}
extension PoilabsVdNavigationCore.DataRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> PoilabsVdNavigationCore.DataResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (PoilabsVdNavigationCore.DataResponse<Any>) -> Swift.Void) -> Self
}
extension PoilabsVdNavigationCore.DownloadRequest {
  public static func jsonResponseSerializer(options: Foundation.JSONSerialization.ReadingOptions = .allowFragments) -> PoilabsVdNavigationCore.DownloadResponseSerializer<Any>
  @discardableResult
  public func responseJSON(queue: Dispatch.DispatchQueue? = nil, options: Foundation.JSONSerialization.ReadingOptions = .allowFragments, completionHandler: @escaping (PoilabsVdNavigationCore.DownloadResponse<Any>) -> Swift.Void) -> Self
}
extension PoilabsVdNavigationCore.Request {
  public static func serializeResponsePropertyList(options: Foundation.PropertyListSerialization.ReadOptions, response: Foundation.HTTPURLResponse?, data: Foundation.Data?, error: Swift.Error?) -> PoilabsVdNavigationCore.Result<Any>
}
extension PoilabsVdNavigationCore.DataRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> PoilabsVdNavigationCore.DataResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (PoilabsVdNavigationCore.DataResponse<Any>) -> Swift.Void) -> Self
}
extension PoilabsVdNavigationCore.DownloadRequest {
  public static func propertyListResponseSerializer(options: Foundation.PropertyListSerialization.ReadOptions = []) -> PoilabsVdNavigationCore.DownloadResponseSerializer<Any>
  @discardableResult
  public func responsePropertyList(queue: Dispatch.DispatchQueue? = nil, options: Foundation.PropertyListSerialization.ReadOptions = [], completionHandler: @escaping (PoilabsVdNavigationCore.DownloadResponse<Any>) -> Swift.Void) -> Self
}
open class MultipartFormData {
  open var contentType: Swift.String {
    get
    set
  }
  public var contentLength: Swift.UInt64 {
    get
  }
  public var boundary: Swift.String
  public init()
  public func append(_ data: Foundation.Data, withName name: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, mimeType: Swift.String)
  public func append(_ data: Foundation.Data, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String)
  public func append(_ fileURL: Foundation.URL, withName name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, name: Swift.String, fileName: Swift.String, mimeType: Swift.String)
  public func append(_ stream: Foundation.InputStream, withLength length: Swift.UInt64, headers: PoilabsVdNavigationCore.HTTPHeaders)
  public func encode() throws -> Foundation.Data
  public func writeEncodedData(to fileURL: Foundation.URL) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Place {
  public var id: Swift.String!
  public var title: Swift.String?
  public var major: [Swift.Int]
  public var address: Swift.String?
  public var lat: Swift.Double?
  public var lon: Swift.Double?
  public var childs: [PoilabsVdNavigationCore.Place]?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var type: PoilabsVdNavigationCore.ItemCategory!
  public class func modelsFromDictionaryArray(array: Foundation.NSArray, type: PoilabsVdNavigationCore.ItemCategory) -> [PoilabsVdNavigationCore.Place]
  required public init?(dictionary: Foundation.NSDictionary, type: PoilabsVdNavigationCore.ItemCategory)
  @objc deinit
}
public protocol URLConvertible {
  func asURL() throws -> Foundation.URL
}
extension Swift.String : PoilabsVdNavigationCore.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URL : PoilabsVdNavigationCore.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
extension Foundation.URLComponents : PoilabsVdNavigationCore.URLConvertible {
  public func asURL() throws -> Foundation.URL
}
public protocol URLRequestConvertible {
  func asURLRequest() throws -> Foundation.URLRequest
}
extension PoilabsVdNavigationCore.URLRequestConvertible {
  public var urlRequest: Foundation.URLRequest? {
    get
  }
}
extension Foundation.URLRequest : PoilabsVdNavigationCore.URLRequestConvertible {
  public func asURLRequest() throws -> Foundation.URLRequest
}
extension Foundation.URLRequest {
  public init(url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) throws
}
@discardableResult
public func request(_ url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .get, parameters: PoilabsVdNavigationCore.Parameters? = nil, encoding: PoilabsVdNavigationCore.ParameterEncoding = URLEncoding.default, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.DataRequest
@discardableResult
public func request(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.DataRequest
@discardableResult
public func download(_ url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .get, parameters: PoilabsVdNavigationCore.Parameters? = nil, encoding: PoilabsVdNavigationCore.ParameterEncoding = URLEncoding.default, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil, to destination: PoilabsVdNavigationCore.DownloadRequest.DownloadFileDestination? = nil) -> PoilabsVdNavigationCore.DownloadRequest
@discardableResult
public func download(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, to destination: PoilabsVdNavigationCore.DownloadRequest.DownloadFileDestination? = nil) -> PoilabsVdNavigationCore.DownloadRequest
@discardableResult
public func download(resumingWith resumeData: Foundation.Data, to destination: PoilabsVdNavigationCore.DownloadRequest.DownloadFileDestination? = nil) -> PoilabsVdNavigationCore.DownloadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.UploadRequest
@discardableResult
public func upload(_ fileURL: Foundation.URL, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.UploadRequest
@discardableResult
public func upload(_ data: Foundation.Data, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil) -> PoilabsVdNavigationCore.UploadRequest
@discardableResult
public func upload(_ stream: Foundation.InputStream, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible) -> PoilabsVdNavigationCore.UploadRequest
public func upload(multipartFormData: @escaping (PoilabsVdNavigationCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, to url: PoilabsVdNavigationCore.URLConvertible, method: PoilabsVdNavigationCore.HTTPMethod = .post, headers: PoilabsVdNavigationCore.HTTPHeaders? = nil, encodingCompletion: ((PoilabsVdNavigationCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
public func upload(multipartFormData: @escaping (PoilabsVdNavigationCore.MultipartFormData) -> Swift.Void, usingThreshold encodingMemoryThreshold: Swift.UInt64 = SessionManager.multipartFormDataEncodingMemoryThreshold, with urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, encodingCompletion: ((PoilabsVdNavigationCore.SessionManager.MultipartFormDataEncodingResult) -> Swift.Void)?)
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(withHostName hostName: Swift.String, port: Swift.Int) -> PoilabsVdNavigationCore.StreamRequest
@available(iOS 9.0, macOS 10.11, tvOS 9.0, *)
@discardableResult
public func stream(with netService: Foundation.NetService) -> PoilabsVdNavigationCore.StreamRequest
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let deviceModelName: Swift.String
}
public enum RouteError {
  case noLocation, noRoute, unknown
  public static func == (a: PoilabsVdNavigationCore.RouteError, b: PoilabsVdNavigationCore.RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteGraphOption {
  case all, selected
  public static func == (a: PoilabsVdNavigationCore.RouteGraphOption, b: PoilabsVdNavigationCore.RouteGraphOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FloorPassMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case elevator, escalator, stairs, all
  public init?(rawValue: Swift.String)
  public typealias AllCases = [PoilabsVdNavigationCore.FloorPassMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [PoilabsVdNavigationCore.FloorPassMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum RouteStatus {
  case outOfRoute, arrived, onRoute, arrivedAfterElevator
  public static func == (a: PoilabsVdNavigationCore.RouteStatus, b: PoilabsVdNavigationCore.RouteStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RouteManagerDelegate {
  func routeManager(floorChangeStep destinationFloor: Swift.Int, by floorPassMethod: PoilabsVdNavigationCore.FloorPassMethod, isFinalStep: Swift.Bool)
  func routeManager(currentUserLocation location: PoilabsVdNavigationCore.Poi, rotation: Swift.Int?, distance: Swift.Double)
  func routeManager(error: PoilabsVdNavigationCore.RouteError)
  func routeManager(routeCalculated target: PoilabsVdNavigationCore.Poi)
  func routeManager(updateCurrentStep meters: Swift.Int, rotation: Swift.Int)
  func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?)
  func routeManager(didUpdate routeStatus: PoilabsVdNavigationCore.RouteStatus)
  func routeManager(arrivedAtDirection direction: Swift.Int)
}
extension PoilabsVdNavigationCore.RouteManagerDelegate {
  public func routeManager(floorChangeStep destinationFloor: Swift.Int, by floorPassMethod: PoilabsVdNavigationCore.FloorPassMethod, isFinalStep: Swift.Bool)
  public func routeManager(arrivedAtDirection direction: Swift.Int)
  public func routeManager(currentUserLocation location: PoilabsVdNavigationCore.Poi, rotation: Swift.Int?, distance: Swift.Double)
  public func routeManager(error: PoilabsVdNavigationCore.RouteError)
  public func routeManager(routeCalculated target: PoilabsVdNavigationCore.Poi)
  public func routeManager(updateCurrentStep meters: Swift.Int, rotation: Swift.Int)
  public func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?)
  public func routeManager(didUpdate routeStatus: PoilabsVdNavigationCore.RouteStatus)
}
public struct RemainingDistanceItem {
  public let text: Swift.String
  public var argumants: [Swift.Int]
}
public class RouteManager {
  public var delegate: PoilabsVdNavigationCore.RouteManagerDelegate? {
    get
    set
  }
  public init(targetPoi: PoilabsVdNavigationCore.Poi, withFloorPassMethods methods: PoilabsVdNavigationCore.RouteGraphOption)
  public init(type: Swift.String, withFloorPassMethods methods: PoilabsVdNavigationCore.RouteGraphOption)
  public func routeRemoved()
  public func navigate()
  public func reInitRoute()
  public func getCurrentFloorPassMethods() -> [PoilabsVdNavigationCore.FloorPassMethod]
  public func isAllFloorPassMethodsUsing() -> Swift.Bool
  public func createAlternativeRoute() -> Swift.Bool
  public func getFloorDifferance() -> Swift.Int?
  public func getRouteLength() -> Swift.Int?
  @objc deinit
}
extension PoilabsVdNavigationCore.RouteManager {
  public func getRemainingSteps(firstNSteps: Swift.Int? = nil) -> [PoilabsVdNavigationCore.RemainingDistanceItem]
  public func getRoutePois() -> [PoilabsVdNavigationCore.Poi]
}
extension PoilabsVdNavigationCore.RouteManager : PoilabsVdNavigationCore.PositioningManagerDelegate {
  public func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, heading: CoreLocation.CLHeading)
  public func positioningManager(didUpdateNearByLocations locations: [(PoilabsVdNavigationCore.Poi, Swift.Double, Swift.Int?)])
  public func positioningManager(didStatusChanged status: PoilabsVdNavigationCore.UserLocationStatus)
}
public protocol PlaceListManagerDelegate {
  func placeListLoaded(status: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class PlaceListManager : ObjectiveC.NSObject {
  public var delegate: PoilabsVdNavigationCore.PlaceListManagerDelegate?
  @objc override dynamic public init()
  public func getConfigList() -> [PoilabsVdNavigationCore.List]
  public func getPlaceList() -> [PoilabsVdNavigationCore.Element]
  public func saveConfig(config: PoilabsVdNavigationCore.ConfigData, appId: Swift.String, lang: Swift.String)
  public func getConfig(appId: Swift.String, lang: Swift.String) -> PoilabsVdNavigationCore.ConfigData?
  public func getPlaceFilteredList(elements: [PoilabsVdNavigationCore.Element]) -> [PoilabsVdNavigationCore.Element]?
  public func getCategories() -> [PoilabsVdNavigationCore.ItemCategory]
  public func searchPlaceFilteredList(withQuery query: Swift.String? = "", on elements: [PoilabsVdNavigationCore.Element]) -> [PoilabsVdNavigationCore.Element]?
  @objc deinit
}
extension PoilabsVdNavigationCore.PlaceListManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
public enum HTTPMethod : Swift.String {
  case options
  case get
  case head
  case post
  case put
  case patch
  case delete
  case trace
  case connect
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public typealias Parameters = [Swift.String : Any]
public protocol ParameterEncoding {
  func encode(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, with parameters: PoilabsVdNavigationCore.Parameters?) throws -> Foundation.URLRequest
}
public struct URLEncoding : PoilabsVdNavigationCore.ParameterEncoding {
  public enum Destination {
    case methodDependent, queryString, httpBody
    public static func == (a: PoilabsVdNavigationCore.URLEncoding.Destination, b: PoilabsVdNavigationCore.URLEncoding.Destination) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum ArrayEncoding {
    case brackets, noBrackets
    public static func == (a: PoilabsVdNavigationCore.URLEncoding.ArrayEncoding, b: PoilabsVdNavigationCore.URLEncoding.ArrayEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum BoolEncoding {
    case numeric, literal
    public static func == (a: PoilabsVdNavigationCore.URLEncoding.BoolEncoding, b: PoilabsVdNavigationCore.URLEncoding.BoolEncoding) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public static var `default`: PoilabsVdNavigationCore.URLEncoding {
    get
  }
  public static var methodDependent: PoilabsVdNavigationCore.URLEncoding {
    get
  }
  public static var queryString: PoilabsVdNavigationCore.URLEncoding {
    get
  }
  public static var httpBody: PoilabsVdNavigationCore.URLEncoding {
    get
  }
  public let destination: PoilabsVdNavigationCore.URLEncoding.Destination
  public let arrayEncoding: PoilabsVdNavigationCore.URLEncoding.ArrayEncoding
  public let boolEncoding: PoilabsVdNavigationCore.URLEncoding.BoolEncoding
  public init(destination: PoilabsVdNavigationCore.URLEncoding.Destination = .methodDependent, arrayEncoding: PoilabsVdNavigationCore.URLEncoding.ArrayEncoding = .brackets, boolEncoding: PoilabsVdNavigationCore.URLEncoding.BoolEncoding = .numeric)
  public func encode(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, with parameters: PoilabsVdNavigationCore.Parameters?) throws -> Foundation.URLRequest
  public func queryComponents(fromKey key: Swift.String, value: Any) -> [(Swift.String, Swift.String)]
  public func escape(_ string: Swift.String) -> Swift.String
}
public struct JSONEncoding : PoilabsVdNavigationCore.ParameterEncoding {
  public static var `default`: PoilabsVdNavigationCore.JSONEncoding {
    get
  }
  public static var prettyPrinted: PoilabsVdNavigationCore.JSONEncoding {
    get
  }
  public let options: Foundation.JSONSerialization.WritingOptions
  public init(options: Foundation.JSONSerialization.WritingOptions = [])
  public func encode(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, with parameters: PoilabsVdNavigationCore.Parameters?) throws -> Foundation.URLRequest
  public func encode(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, withJSONObject jsonObject: Any? = nil) throws -> Foundation.URLRequest
}
public struct PropertyListEncoding : PoilabsVdNavigationCore.ParameterEncoding {
  public static var `default`: PoilabsVdNavigationCore.PropertyListEncoding {
    get
  }
  public static var xml: PoilabsVdNavigationCore.PropertyListEncoding {
    get
  }
  public static var binary: PoilabsVdNavigationCore.PropertyListEncoding {
    get
  }
  public let format: Foundation.PropertyListSerialization.PropertyListFormat
  public let options: Foundation.PropertyListSerialization.WriteOptions
  public init(format: Foundation.PropertyListSerialization.PropertyListFormat = .xml, options: Foundation.PropertyListSerialization.WriteOptions = 0)
  public func encode(_ urlRequest: PoilabsVdNavigationCore.URLRequestConvertible, with parameters: PoilabsVdNavigationCore.Parameters?) throws -> Foundation.URLRequest
}
extension Foundation.NSNotification.Name {
  public struct Task {
    public static let DidResume: Foundation.Notification.Name
    public static let DidSuspend: Foundation.Notification.Name
    public static let DidCancel: Foundation.Notification.Name
    public static let DidComplete: Foundation.Notification.Name
  }
}
extension Foundation.Notification {
  public struct Key {
    public static let Task: Swift.String
    public static let ResponseData: Swift.String
  }
}
@_hasMissingDesignatedInitializers public class StoreListManager {
  public init(placeId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  public func getInfoText() -> Swift.String
  public func getStoreList() -> [PoilabsVdNavigationCore.Poi]
  public func getCategories() -> [Swift.String]
  public func sortPoisByLocation(pois: [PoilabsVdNavigationCore.Poi]) -> [PoilabsVdNavigationCore.Poi]
  public func filterPoisByReachableZones(pois: [PoilabsVdNavigationCore.Poi]) -> [PoilabsVdNavigationCore.Poi]
  public func filterPoiList(withKeyword keyword: Swift.String, andCategoryFilter category: Swift.String? = nil) -> [PoilabsVdNavigationCore.Poi]
  public func getFacilities() -> [PoilabsVdNavigationCore.Facility]
  @objc deinit
}
public class PointDetailManager {
  public init(target: PoilabsVdNavigationCore.Poi)
  public func getFloorLevel() -> Swift.String
  @objc deinit
}
extension PoilabsVdNavigationCore.NetworkReachabilityManager.ConnectionType : Swift.Equatable {}
extension PoilabsVdNavigationCore.NetworkReachabilityManager.ConnectionType : Swift.Hashable {}
extension PoilabsVdNavigationCore.PMError : Swift.Equatable {}
extension PoilabsVdNavigationCore.PMError : Swift.Hashable {}
extension PoilabsVdNavigationCore.UserLocationStatus : Swift.Equatable {}
extension PoilabsVdNavigationCore.UserLocationStatus : Swift.Hashable {}
extension PoilabsVdNavigationCore.RouteError : Swift.Equatable {}
extension PoilabsVdNavigationCore.RouteError : Swift.Hashable {}
extension PoilabsVdNavigationCore.RouteGraphOption : Swift.Equatable {}
extension PoilabsVdNavigationCore.RouteGraphOption : Swift.Hashable {}
extension PoilabsVdNavigationCore.FloorPassMethod : Swift.Equatable {}
extension PoilabsVdNavigationCore.FloorPassMethod : Swift.Hashable {}
extension PoilabsVdNavigationCore.FloorPassMethod : Swift.RawRepresentable {}
extension PoilabsVdNavigationCore.RouteStatus : Swift.Equatable {}
extension PoilabsVdNavigationCore.RouteStatus : Swift.Hashable {}
extension PoilabsVdNavigationCore.HTTPMethod : Swift.Equatable {}
extension PoilabsVdNavigationCore.HTTPMethod : Swift.Hashable {}
extension PoilabsVdNavigationCore.HTTPMethod : Swift.RawRepresentable {}
extension PoilabsVdNavigationCore.URLEncoding.Destination : Swift.Equatable {}
extension PoilabsVdNavigationCore.URLEncoding.Destination : Swift.Hashable {}
extension PoilabsVdNavigationCore.URLEncoding.ArrayEncoding : Swift.Equatable {}
extension PoilabsVdNavigationCore.URLEncoding.ArrayEncoding : Swift.Hashable {}
extension PoilabsVdNavigationCore.URLEncoding.BoolEncoding : Swift.Equatable {}
extension PoilabsVdNavigationCore.URLEncoding.BoolEncoding : Swift.Hashable {}
