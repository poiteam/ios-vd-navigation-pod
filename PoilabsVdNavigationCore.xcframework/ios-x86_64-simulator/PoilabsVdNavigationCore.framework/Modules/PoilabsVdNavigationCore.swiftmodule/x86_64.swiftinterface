// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target x86_64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PoilabsVdNavigationCore
import Alamofire
import CoreBluetooth
import CoreLocation
import Foundation
import PoilabsPositioning
@_exported import PoilabsVdNavigationCore
import Swift
import UIKit
import _Concurrency
public protocol PositioningManagerDelegate {
  func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  func positioningManager(didStatusChanged status: UserLocationStatus)
}
public protocol PositioninManagerErrorDelegate {
  func positioningManager(didFail error: PMError)
  func positioningManagerDidStart()
}
public enum PMError {
  case location
  case bluetooth
  public static func == (a: PMError, b: PMError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UserLocationStatus {
  case waiting
  case notFound
  case found
  public static func == (a: UserLocationStatus, b: UserLocationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PositioningManager : ObjectiveC.NSObject {
  public var delegate: PositioningManagerDelegate? {
    get
    set
  }
  public var errorDelegate: PositioninManagerErrorDelegate?
  public static let shared: PositioningManager
  public func startPositioning()
  public func stopPositioning()
  public func getPlaceTitle() -> Swift.String
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension PositioningManager : PoilabsPositioning.PoilabsPositioningDelegate {
  @objc dynamic public func poilabsPositioningDidStart()
  @objc dynamic public func poilabsPositioning(didStatusChange status: PoilabsPositioning.PLPStatus, reason: PoilabsPositioning.PLPLocationStatusReason)
  @objc dynamic public func poilabsPositioning(didFindBeacon uuid: Swift.String, major: Swift.String, minor: Swift.String)
  @objc dynamic public func poilabsPositioning(didFail error: PoilabsPositioning.PoilabsPositioningError)
  @objc dynamic public func poilabsPositioning(didUpdateLocation location: PoilabsPositioning.PLPBeaconNode)
  @objc dynamic public func poilabsPositioning(didUpdateHeading heading: CoreLocation.CLHeading)
}
public class Segment {
  public var finishPoiId: Swift.String?
  public var finishNode: PESGraphNode?
  public var startPoiId: Swift.String?
  public var startNode: PESGraphNode?
  public var weight: Swift.Double?
  public var isAvailableForDisabledPerson: Swift.Bool
  public class func modelsFromDictionaryArray(array: Foundation.NSArray, withStartId startID: Swift.String) -> [Segment]
  required public init?(dictionary: Foundation.NSDictionary, startID: Swift.String)
  @objc deinit
}
public class Poi : Swift.Hashable {
  public static func == (lhs: Poi, rhs: Poi) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var isActive: Swift.Bool?
  public var filters: Filters?
  public var properties: DataProperties?
  public var map: Map?
  public var title: Swift.String?
  public var description: Swift.String?
  public var location: Location?
  public var type: Swift.String?
  public var secret: Swift.String?
  public var createdAt: Swift.Int?
  public var id: Swift.String?
  public var updatedAt: Swift.Int?
  public var isDeleted: Swift.Bool?
  public var navigation: NavigationProperties?
  public var node: PESGraphNode?
  public var coordinates: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var centerPoint: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var floorLevel: Swift.Int? {
    get
  }
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Poi]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class NavigationProperties {
  public var isVisibleOnList: Swift.Bool
  public var isVisibleOnMap: Swift.Bool
  public var segments: [Segment]?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Location {
  public var geometry: Geometry?
  public var properties: LocationProperties?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Location]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public protocol PoiVDNavigationManagerDelegate {
  func PoiVDNavigationManager(didChangeAuthorization status: Swift.Bool)
  func PoiVDNavigationManager(centralManagerDidUpdateState status: Swift.Bool)
}
public class PoiVDNavigationManager {
  public func navigationManager(didChangeAuthorization status: Swift.Bool)
  public func navigationManager(centralManagerDidUpdateState status: Swift.Bool)
  public var delegate: PoiVDNavigationManagerDelegate?
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getMenuLevel() -> Swift.Int
  public func getMenuItems() -> [ItemBase]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ItemCategory : Swift.Hashable {
  public static func == (lhs: ItemCategory, rhs: ItemCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var type: Swift.String
  public var nameTr: Swift.String
  public var nameEn: Swift.String
  public var name: Swift.String {
    get
  }
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class ItemBase {
  public var category: ItemCategory
  public var elements: [Place]
  required public init?(dictionary: Foundation.NSDictionary)
  public func getElements() -> [Place]
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [ItemBase]
  @objc deinit
}
public class FilteredPlace {
  public var city: Swift.String
  public var placeList: [Place]
  public init(withCity city: Swift.String)
  @objc deinit
}
public class Map {
  public var vendor: Swift.String?
  public var accessToken: Swift.String?
  public var styleUrl: Swift.String?
  public var floors: Swift.Array<Floors>?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Map]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class FloorProperties {
  public var centerPoint: [Swift.Double]?
  public var zoomLevel: Swift.Int?
  public var minZoomLevel: Swift.Int?
  public var maxZoomLevel: Swift.Int?
  public var maxBounds: [[Swift.Double]]?
  public var level: Swift.Int?
  public var conversionFactor: Swift.Double?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Floors {
  public var title_en: Swift.String?
  public var title: Swift.String?
  public var properties: FloorProperties?
  public var level: Swift.Int?
  public var mapRotateAngle: Swift.Int?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Floors]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Place {
  public var id: Swift.String?
  public var title: Swift.String?
  public var major: [Swift.Int]
  public var city: Swift.String?
  public var district: Swift.String?
  public var address: Swift.String?
  public var lat: Swift.Double?
  public var lon: Swift.Double?
  public var childs: [Place]?
  public var description: Swift.String?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var type: ItemCategory!
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Place]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Filters {
  public var placeType: [Swift.String]?
  public var pointType: [Swift.String]?
  public var storeType: Swift.String?
  public var networkType: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Filters]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FilteredPoi {
  public var title: Swift.String
  public var description: Swift.String
  public var floor: Swift.String
  public var content: Swift.String?
  @objc deinit
}
public class Geometry {
  public var type: Swift.String?
  public var coordinates: CoreLocation.CLLocationCoordinate2D?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Geometry]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class MapProperties {
  public var defaultFloor: Swift.Int?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public enum RouteError {
  case noLocation, noRoute, unknown
  public static func == (a: RouteError, b: RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum PoiFacility {
  case wc, elevator
  public static func == (a: PoiFacility, b: PoiFacility) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SelectedGraph {
  case mainGraph, disableGraph
  public static func == (a: SelectedGraph, b: SelectedGraph) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FloorPassMethod {
  case elevator, escalator, stairs
  public static func == (a: FloorPassMethod, b: FloorPassMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteStatus {
  case outOfRoute, arrived, onRoute
  public static func == (a: RouteStatus, b: RouteStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RouteManagerDelegate {
  func routeManager(floorChangeStep destinationFloor: Swift.Int, by floorPassMethod: FloorPassMethod)
  func routeManager(currentUserLocation location: (Poi, Swift.Int?))
  func routeManager(error: RouteError)
  func routeManager(routeCalculated route: PESGraphRoute, target: Poi)
  func routeManager(updateCurrentStep meters: Swift.Int, rotation: Swift.Int)
  func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?)
  func routeManager(didUpdate routeStatus: RouteStatus)
}
public struct RemainingDistanceItem {
  public let text: Swift.String
  public var argumants: [Swift.Int]
}
public class RouteManager {
  public var delegate: RouteManagerDelegate? {
    get
    set
  }
  public init(targetPoi: Poi, on graph: SelectedGraph)
  public init(type: PoiFacility, on graph: SelectedGraph)
  public func navigate()
  public func reInitRoute(on graph: SelectedGraph)
  public func getFloorDifferance() -> Swift.Int?
  public func getRouteLength() -> Swift.Int?
  @objc deinit
}
extension RouteManager {
  public func getRemainingSteps() -> [RemainingDistanceItem]
}
extension RouteManager : PositioningManagerDelegate {
  public func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  public func positioningManager(didStatusChanged status: UserLocationStatus)
}
public protocol PlaceListManagerDelegate {
  func placeListLoaded(status: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class PlaceListManager : ObjectiveC.NSObject {
  public var delegate: PlaceListManagerDelegate?
  @objc override dynamic public init()
  public func getPlaceList() -> [Place]
  public func getPlaceFilteredList() -> [Place]?
  public func getCategories() -> [ItemCategory]
  public func searchPlaceFilteredList(withQuery query: Swift.String? = "") -> [Place]?
  @objc deinit
}
extension PlaceListManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
public class DataProperties {
  public var hoMallDescription: Swift.String
  public var hoMallDescription_en: Swift.String
  public var hoShopAdress: Swift.String?
  public var content: Swift.String?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class LocationProperties {
  public var city: Swift.String?
  public var district: Swift.String?
  public var floorLevel: Swift.Int?
  public var shopCenterPoint: CoreLocation.CLLocationCoordinate2D?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class StoreListManager {
  public init(placeId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  public func getInfoText() -> Swift.String
  public func getStoreList() -> [Poi]
  public func hasElevator() -> Swift.Bool
  public func hasWc() -> Swift.Bool
  public func getCategories() -> [Swift.String]
  public func getPointList() -> [FilteredPoi]
  @objc deinit
}
public class PointDetailManager {
  public init(target: Poi)
  public func getFloorLevel() -> Swift.String
  @objc deinit
}
extension PMError : Swift.Equatable {}
extension PMError : Swift.Hashable {}
extension UserLocationStatus : Swift.Equatable {}
extension UserLocationStatus : Swift.Hashable {}
extension RouteError : Swift.Equatable {}
extension RouteError : Swift.Hashable {}
extension PoiFacility : Swift.Equatable {}
extension PoiFacility : Swift.Hashable {}
extension SelectedGraph : Swift.Equatable {}
extension SelectedGraph : Swift.Hashable {}
extension FloorPassMethod : Swift.Equatable {}
extension FloorPassMethod : Swift.Hashable {}
extension RouteStatus : Swift.Equatable {}
extension RouteStatus : Swift.Hashable {}
