// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PoilabsVdNavigationCore
import Alamofire
import CoreBluetooth
import CoreLocation
import Foundation
import PoilabsPositioning
@_exported import PoilabsVdNavigationCore
import Swift
import UIKit
import _Concurrency
public class Segment {
  public var finishPoiId: Swift.String?
  public var finishNode: PoilabsVdNavigationCore.PESGraphNode?
  public var startPoiId: Swift.String?
  public var startNode: PoilabsVdNavigationCore.PESGraphNode?
  public var weight: Swift.Double?
  public var isAvailableForDisabledPerson: Swift.Bool
  public class func modelsFromDictionaryArray(array: Foundation.NSArray, withStartId startID: Swift.String) -> [PoilabsVdNavigationCore.Segment]
  required public init?(dictionary: Foundation.NSDictionary, startID: Swift.String)
  @objc deinit
}
public class Poi {
  public var isActive: Swift.Bool?
  public var filters: PoilabsVdNavigationCore.Filters?
  public var properties: PoilabsVdNavigationCore.DataProperties?
  public var map: PoilabsVdNavigationCore.Map?
  public var location: PoilabsVdNavigationCore.Location?
  public var type: Swift.String?
  public var secret: Swift.String?
  public var createdAt: Swift.Int?
  public var id: Swift.String?
  public var updatedAt: Swift.Int?
  public var isDeleted: Swift.Bool?
  public var navigation: PoilabsVdNavigationCore.NavigationProperties?
  public var node: PoilabsVdNavigationCore.PESGraphNode?
  public var localizedTitle: Swift.String? {
    get
  }
  public var localizedDescription: Swift.String? {
    get
  }
  public var coordinates: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var centerPoint: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var floorLevel: Swift.Int? {
    get
  }
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.Poi]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class NavigationProperties {
  public var isVisibleOnList: Swift.Bool
  public var isVisibleOnMap: Swift.Bool
  public var segments: [PoilabsVdNavigationCore.Segment]?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Location {
  public var geometry: PoilabsVdNavigationCore.Geometry?
  public var properties: PoilabsVdNavigationCore.LocationProperties?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.Location]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public protocol PoiVDNavigationManagerDelegate {
  func PoiVDNavigationManager(didChangeAuthorization status: Swift.Bool)
  func PoiVDNavigationManager(centralManagerDidUpdateState status: Swift.Bool)
}
public class PoiVDNavigationManager : PoilabsVdNavigationCore.NavigationManagerDelegate {
  public func navigationManager(didChangeAuthorization status: Swift.Bool)
  public func navigationManager(centralManagerDidUpdateState status: Swift.Bool)
  public var delegate: PoilabsVdNavigationCore.PoiVDNavigationManagerDelegate?
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getMenuLevel() -> Swift.Int
  public func getMenuItems() -> [PoilabsVdNavigationCore.ItemBase]
  public func startLocationTracking()
  @objc deinit
}
public class ItemBase {
  public var type: Swift.String?
  public var nameTr: Swift.String?
  public var nameEn: Swift.String?
  public var name: [Swift.String : Swift.String]
  public var elements: [PoilabsVdNavigationCore.Place]
  required public init?(dictionary: Foundation.NSDictionary)
  public func getElements() -> [PoilabsVdNavigationCore.Place]
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.ItemBase]
  @objc deinit
}
public class FilteredPlace {
  public var city: Swift.String
  public var placeList: [PoilabsVdNavigationCore.Place]
  public init(withCity city: Swift.String)
  @objc deinit
}
public class Map {
  public var vendor: Swift.String?
  public var accessToken: Swift.String?
  public var styleUrl: Swift.String?
  public var floors: Swift.Array<PoilabsVdNavigationCore.Floors>?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.Map]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class FloorProperties {
  public var centerPoint: [Swift.Double]?
  public var zoomLevel: Swift.Int?
  public var minZoomLevel: Swift.Int?
  public var maxZoomLevel: Swift.Int?
  public var maxBounds: [[Swift.Double]]?
  public var level: Swift.Int?
  public var conversionFactor: Swift.Int?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Floors {
  public var title_en: Swift.String?
  public var title: Swift.String?
  public var properties: PoilabsVdNavigationCore.FloorProperties?
  public var level: Swift.Int?
  public var mapRotateAngle: Swift.Int?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.Floors]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Place {
  public var id: Swift.String?
  public var title: Swift.String?
  public var major: [Swift.Int]
  public var city: Swift.String?
  public var district: Swift.String?
  public var address: Swift.String?
  public var lat: Swift.Double?
  public var lon: Swift.Double?
  public var childs: [PoilabsVdNavigationCore.Place]?
  public var description: Swift.String?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var type: Swift.String
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.Place]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class Filters {
  public var placeType: [Swift.String]?
  public var pointType: [Swift.String]?
  public var storeType: Swift.String?
  public var networkType: Swift.String?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.Filters]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FilteredPoi {
  public var title: Swift.String
  public var description: Swift.String
  public var floor: Swift.String
  public var content: Swift.String?
  @objc deinit
}
public class Geometry {
  public var type: Swift.String?
  public var coordinates: CoreLocation.CLLocationCoordinate2D?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [PoilabsVdNavigationCore.Geometry]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class MapProperties {
  public var defaultFloor: Swift.Int?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public protocol RouteManagerDelegate {
  func routeManagerPopUp(popUpMessage: Swift.String)
  func routeManagerRouteSummary(title: Swift.String, floorDifference: Swift.Int, floorDifferenceText: Swift.String, lenght: Swift.Float)
  func routeManagerArrived(title: Swift.String, rotation: Swift.String?)
  func routeManagerStepUpdate(navigationText: [Swift.String : Swift.String?])
}
public class RouteManager {
  public var delegate: PoilabsVdNavigationCore.RouteManagerDelegate?
  public init(destinationPoi: PoilabsVdNavigationCore.FilteredPoi)
  public func navigate()
  public func reInitRoute()
  @objc deinit
}
extension PoilabsVdNavigationCore.RouteManager : PoilabsVdNavigationCore.NavigationManagerDelegate {
  public func navigationManagerDidUpdateUserLocation(nodeList: [PoilabsVdNavigationCore.Poi], heading: CoreLocation.CLHeading)
}
public protocol PlaceListManagerDelegate {
  func placeListLoaded(status: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class PlaceListManager : ObjectiveC.NSObject {
  public var delegate: PoilabsVdNavigationCore.PlaceListManagerDelegate?
  @objc override dynamic public init()
  public func getPlaceList() -> [PoilabsVdNavigationCore.Place]
  public func getPlaceFilteredList() -> [PoilabsVdNavigationCore.Place]?
  public func getCategories() -> [Swift.String]
  public func searchPlaceFilteredList(withQuery query: Swift.String? = "") -> [PoilabsVdNavigationCore.Place]?
  @objc deinit
}
extension PoilabsVdNavigationCore.PlaceListManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
public class DataProperties {
  public var hoMallDescription: Swift.String
  public var hoMallDescription_en: Swift.String
  public var hoShopAdress: Swift.String?
  public var content: Swift.String?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class LocationProperties {
  public var city: Swift.String?
  public var district: Swift.String?
  public var floorLevel: Swift.Int?
  public var shopCenterPoint: CoreLocation.CLLocationCoordinate2D?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class PlaceDetailManager {
  public init(placeId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getInfoText() -> Swift.String
  public func getPointList() -> [PoilabsVdNavigationCore.FilteredPoi]
  @objc deinit
}
public class PointDetailManager {
  public init(target: PoilabsVdNavigationCore.Poi)
  public func getFloorLevel() -> Swift.String
  @objc deinit
}
public protocol NavigationManagerDelegate {
  func navigationManagerFreeWalkState(state: PoilabsVdNavigationCore.FreeWalkState)
  func navigationManagerDidUpdateUserLocation(nodeList: [PoilabsVdNavigationCore.Poi], heading: CoreLocation.CLHeading)
  func navigationManagerDidUpdateUserLocation(freeMoveText: [[Swift.String : Swift.String?]], floorLevelText: Swift.String)
  func navigationManager(didChangeAuthorization status: Swift.Bool)
  func navigationManager(centralManagerDidUpdateState status: Swift.Bool)
}
extension PoilabsVdNavigationCore.NavigationManagerDelegate {
  public func navigationManager(didChangeAuthorization status: Swift.Bool)
  public func navigationManager(centralManagerDidUpdateState status: Swift.Bool)
  public func navigationManagerFreeWalkState(state: PoilabsVdNavigationCore.FreeWalkState)
  public func navigationManagerDidUpdateUserLocation(nodeList: [PoilabsVdNavigationCore.Poi], heading: CoreLocation.CLHeading)
  public func navigationManagerDidUpdateUserLocation(freeMoveText: [[Swift.String : Swift.String?]], floorLevelText: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NavigationManager : ObjectiveC.NSObject {
  public init(target: PoilabsVdNavigationCore.Place)
  public var delegate: PoilabsVdNavigationCore.NavigationManagerDelegate? {
    get
    set
  }
  public func CreateBeaconDataDictionary(_ identifier: Swift.String, _ secret: Swift.String, _ uuid: Swift.String, _ bundleId: Any, _ signalsArray: [Any]) -> Alamofire.Parameters
  public func sortBeaconsData(forRSSI comingBeaconsArray: [Any]) -> [Any]
  @objc deinit
}
public enum FreeWalkState {
  case waiting
  case notFound
  case found
  public static func == (a: PoilabsVdNavigationCore.FreeWalkState, b: PoilabsVdNavigationCore.FreeWalkState) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension PoilabsVdNavigationCore.FreeWalkState : Swift.Equatable {}
extension PoilabsVdNavigationCore.FreeWalkState : Swift.Hashable {}
