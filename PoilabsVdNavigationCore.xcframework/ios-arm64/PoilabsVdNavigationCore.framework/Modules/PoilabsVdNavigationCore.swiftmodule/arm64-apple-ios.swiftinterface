// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PoilabsVdNavigationCore
import Alamofire
import CoreBluetooth
import CoreData
import CoreLocation
import Foundation
import PoilabsPositioning
@_exported import PoilabsVdNavigationCore
import Swift
import UIKit
import _Concurrency
extension PropertiesMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PropertiesMO>
  @objc @NSManaged dynamic public var content: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var hoMallDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: PointMO? {
    @objc get
    @objc set
  }
}
public protocol PositioningManagerDelegate {
  func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  func positioningManager(didStatusChanged status: UserLocationStatus)
}
public protocol PositioninManagerErrorDelegate {
  func positioningManager(didFail error: PMError)
  func positioningManagerDidStart()
}
public enum PMError {
  case location
  case bluetooth
  public static func == (a: PMError, b: PMError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UserLocationStatus {
  case waiting
  case notFound
  case found
  public static func == (a: UserLocationStatus, b: UserLocationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PositioningManager : ObjectiveC.NSObject {
  public var delegate: PositioningManagerDelegate? {
    get
    set
  }
  public var errorDelegate: PositioninManagerErrorDelegate?
  public static let shared: PositioningManager
  public func startPositioning()
  public func stopPositioning()
  public func getPlaceTitle() -> Swift.String
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension PositioningManager : PoilabsPositioning.PoilabsPositioningDelegate {
  @objc dynamic public func poilabsPositioningDidStart()
  @objc dynamic public func poilabsPositioning(didStatusChange status: PoilabsPositioning.PLPStatus, reason: PoilabsPositioning.PLPLocationStatusReason)
  @objc dynamic public func poilabsPositioning(didFindBeacon uuid: Swift.String, major: Swift.String, minor: Swift.String)
  @objc dynamic public func poilabsPositioning(didFail error: PoilabsPositioning.PoilabsPositioningError)
  @objc dynamic public func poilabsPositioning(didUpdateLocation location: PoilabsPositioning.PLPBeaconNode)
  @objc dynamic public func poilabsPositioning(didUpdateHeading heading: CoreLocation.CLHeading)
}
extension FacilityMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FacilityMO>
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pointType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var order: Swift.Int {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: ChildsMO? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(SegmentMO) public class SegmentMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public class Segment {
  public var finishPoiId: Swift.String?
  public var finishNode: PESGraphNode?
  public var startPoiId: Swift.String?
  public var startNode: PESGraphNode?
  public var weight: Swift.Double?
  public var isAvailableForDisabledPerson: Swift.Bool
  public class func modelsFromDictionaryArray(array: Foundation.NSArray, withStartId startID: Swift.String) -> [Segment]
  required public init?(dictionary: Foundation.NSDictionary, startID: Swift.String)
  public init(startId: Swift.String, finishId: Swift.String, weight: Swift.Double, isAvailableForDisabledPerson: Swift.Bool)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(PointMO) public class PointMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension LocationPropertiesMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LocationPropertiesMO>
  @objc @NSManaged dynamic public var floorLevel: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var shopCenterPoint: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: LocationMO? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(PropertiesMO) public class PropertiesMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension SegmentMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<SegmentMO>
  @objc @NSManaged dynamic public var startId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var weight: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isAvailableForDisabledPerson: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: NavigationMO? {
    @objc get
    @objc set
  }
}
public class ChildBase {
  public var allPointsForMap: [Poi]
  public var mainGraph: PESGraph
  public var disableGraph: PESGraph
  public var map: Map?
  public var facilities: [Facility]
  public var placeTitle: Swift.String
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [ChildBase]
  required public init?(dictionary: Foundation.NSDictionary)
  public init(points: [Poi], floors: [Floors], facilities: [Facility], title: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(ChildsMO) public class ChildsMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GeometryMO) public class GeometryMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Poi : Swift.Hashable {
  public static func == (lhs: Poi, rhs: Poi) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var filters: Filters?
  public var properties: DataProperties?
  public var title: Swift.String?
  public var description: Swift.String?
  public var location: Location?
  public var id: Swift.String?
  public var navigation: NavigationProperties?
  public var node: PESGraphNode?
  public var coordinates: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var centerPoint: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var floorLevel: Swift.Int? {
    get
  }
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Poi]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class NavigationProperties {
  public var isVisibleOnList: Swift.Bool
  public var isVisibleOnMap: Swift.Bool
  public var segments: [Segment]?
  required public init?(dictionary: Foundation.NSDictionary)
  public init(isVisibleOnList: Swift.Bool, isVisibleOnMap: Swift.Bool, segments: [Segment])
  @objc deinit
}
extension Foundation.Bundle {
  public class var applicationVersionNumber: Swift.String {
    get
  }
}
extension FloorMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FloorMO>
  @objc @NSManaged dynamic public var level: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var mapRotateAngle: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var conversionFactor: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var routeConversionFactorDividend: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var conversionFactorDividend: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: ChildsMO? {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class ConfigData {
  public var uuid: Swift.String?
  public var messagingTime: Swift.Double?
  public var childsUrl: Swift.String?
  public var minRssiLimit: Swift.Int?
  public var elements: [Place]
  public var menuLevel: Swift.Int?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Location {
  public var geometry: Geometry?
  public var properties: LocationProperties?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Location]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public protocol PoiVDNavigationManagerDelegate {
  func PoiVDNavigationManager(didChangeAuthorization status: Swift.Bool)
  func PoiVDNavigationManager(centralManagerDidUpdateState status: Swift.Bool)
}
public class PoiVDNavigationManager {
  public func navigationManager(didChangeAuthorization status: Swift.Bool)
  public func navigationManager(centralManagerDidUpdateState status: Swift.Bool)
  public var delegate: PoiVDNavigationManagerDelegate?
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getMenuLevel() -> Swift.Int
  public func getMenuItems() -> [Place]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ItemCategory : Swift.Hashable {
  public static func == (lhs: ItemCategory, rhs: ItemCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var type: Swift.String
  public var nameTr: Swift.String
  public var nameEn: Swift.String
  public var name: Swift.String {
    get
  }
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class ItemBase {
  public var category: ItemCategory
  public var elements: [Place]
  required public init?(dictionary: Foundation.NSDictionary)
  public func getElements() -> [Place]
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [ItemBase]
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FloorMO) public class FloorMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(FacilityMO) public class FacilityMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NavigationPropertiesMO) public class NavigationPropertiesMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension ConfigMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ConfigMO>
  @objc @NSManaged dynamic public var uuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var messagingTime: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var childsUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minRssiLimit: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var menuLevel: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var appId: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lang: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var places: Swift.Set<PlaceMO>? {
    @objc get
    @objc set
  }
}
extension ConfigMO {
  @objc(addPlacesObject:) @NSManaged dynamic public func addToPlaces(_ value: PlaceMO)
  @objc(removePlacesObject:) @NSManaged dynamic public func removeFromPlaces(_ value: PlaceMO)
  @objc(addPlaces:) @NSManaged dynamic public func addToPlaces(_ values: Foundation.NSSet)
  @objc(removePlaces:) @NSManaged dynamic public func removeFromPlaces(_ values: Foundation.NSSet)
}
public class Map {
  public var floors: [Floors]
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Map]
  required public init?(dictionary: Foundation.NSDictionary)
  public init(floors: [Floors])
  @objc deinit
}
public class Facility : Swift.Codable {
  public var title: Swift.String!
  public var pointType: Swift.String!
  public var order: Swift.Int!
  required public init(dictionary: Foundation.NSDictionary)
  public init(title: Swift.String, pointType: Swift.String, order: Swift.Int)
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Facility]
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension FiltersMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<FiltersMO>
  @objc @NSManaged dynamic public var pointType: [Swift.String]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: PointMO? {
    @objc get
    @objc set
  }
}
public class FloorProperties {
  public var level: Swift.Int?
  public var conversionFactor: Swift.Double?
  public var routeConversionFactorDividend: Swift.Double
  public var conversionFactorDividend: Swift.Double
  required public init?(dictionary: Foundation.NSDictionary)
  public init(level: Swift.Int, conversionFactor: Swift.Double, routeConversionFactorDividend: Swift.Double, conversionFactorDividend: Swift.Double)
  @objc deinit
}
public class Floors {
  public var title: Swift.String?
  public var properties: FloorProperties?
  public var level: Swift.Int?
  public var mapRotateAngle: Swift.Int?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Floors]
  required public init?(dictionary: Foundation.NSDictionary)
  public init(title: Swift.String, level: Swift.Int, mapRotateAngle: Swift.Int, conversionFactor: Swift.Double, routeConversionFactorDividend: Swift.Double, conversionFactorDividend: Swift.Double)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Place {
  public var id: Swift.String!
  public var title: Swift.String?
  public var major: [Swift.Int]
  public var address: Swift.String?
  public var lat: Swift.Double?
  public var lon: Swift.Double?
  public var childs: [Place]?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var type: ItemCategory!
  public class func modelsFromDictionaryArray(array: Foundation.NSArray, type: ItemCategory) -> [Place]
  required public init?(dictionary: Foundation.NSDictionary, type: ItemCategory)
  @objc deinit
}
extension NavigationMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NavigationMO>
  @objc @NSManaged dynamic public var properties: NavigationPropertiesMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: PointMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var segments: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension NavigationMO {
  @objc(addSegmentsObject:) @NSManaged dynamic public func addToSegments(_ value: SegmentMO)
  @objc(removeSegmentsObject:) @NSManaged dynamic public func removeFromSegments(_ value: SegmentMO)
  @objc(addSegments:) @NSManaged dynamic public func addToSegments(_ values: Foundation.NSSet)
  @objc(removeSegments:) @NSManaged dynamic public func removeFromSegments(_ values: Foundation.NSSet)
}
public class Filters : Swift.Codable {
  public var pointType: [Swift.String]
  required public init?(dictionary: Foundation.NSDictionary)
  public init(pointType: [Swift.String])
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
@_inheritsConvenienceInitializers @objc(LocationPropertiesMO) public class LocationPropertiesMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FilteredPoi {
  public var title: Swift.String
  public var description: Swift.String
  public var floor: Swift.String
  public var content: Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Geometry {
  public var coordinates: CoreLocation.CLLocationCoordinate2D?
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [Geometry]
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
public class MapProperties {
  public var defaultFloor: Swift.Int?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(NavigationMO) public class NavigationMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let deviceModelName: Swift.String
}
@objc @_inheritsConvenienceInitializers public class ConfigMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public enum RouteError {
  case noLocation, noRoute, unknown
  public static func == (a: RouteError, b: RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SelectedGraph {
  case mainGraph, disableGraph
  public static func == (a: SelectedGraph, b: SelectedGraph) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FloorPassMethod {
  case elevator, escalator, stairs
  public static func == (a: FloorPassMethod, b: FloorPassMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteStatus {
  case outOfRoute, arrived, onRoute
  public static func == (a: RouteStatus, b: RouteStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RouteManagerDelegate {
  func routeManager(floorChangeStep destinationFloor: Swift.Int, by floorPassMethod: FloorPassMethod)
  func routeManager(currentUserLocation location: (Poi, Swift.Int?))
  func routeManager(error: RouteError)
  func routeManager(routeCalculated route: PESGraphRoute, target: Poi)
  func routeManager(updateCurrentStep meters: Swift.Int, rotation: Swift.Int)
  func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?)
  func routeManager(didUpdate routeStatus: RouteStatus)
}
public struct RemainingDistanceItem {
  public let text: Swift.String
  public var argumants: [Swift.Int]
}
public class RouteManager {
  public var delegate: RouteManagerDelegate? {
    get
    set
  }
  public init(targetPoi: Poi, on graph: SelectedGraph)
  public init(type: Swift.String, on graph: SelectedGraph)
  public func navigate()
  public func reInitRoute()
  public func getSelectedGraph() -> SelectedGraph
  public func getFloorDifferance() -> Swift.Int?
  public func getRouteLength() -> Swift.Int?
  @objc deinit
}
extension RouteManager {
  public func getRemainingSteps() -> [RemainingDistanceItem]
}
extension RouteManager : PositioningManagerDelegate {
  public func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  public func positioningManager(didStatusChanged status: UserLocationStatus)
}
extension LocationMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<LocationMO>
  @objc @NSManaged dynamic public var geometry: GeometryMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: PointMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var properties: LocationPropertiesMO? {
    @objc get
    @objc set
  }
}
public protocol PlaceListManagerDelegate {
  func placeListLoaded(status: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class PlaceListManager : ObjectiveC.NSObject {
  public var delegate: PlaceListManagerDelegate?
  @objc override dynamic public init()
  public func getPlaceList() -> [Place]
  public func getPlaceFilteredList() -> [Place]?
  public func getCategories() -> [ItemCategory]
  public func searchPlaceFilteredList(withQuery query: Swift.String? = "") -> [Place]?
  @objc deinit
}
extension PlaceListManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
@_inheritsConvenienceInitializers @objc(LocationMO) public class LocationMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public class DataProperties : Swift.Codable {
  public var hoMallDescription: Swift.String
  public var hoMallDescription_en: Swift.String
  public var hoShopAdress: Swift.String?
  public var content: Swift.String?
  required public init?(dictionary: Foundation.NSDictionary)
  public init(content: Swift.String?, hoMallDescription: Swift.String)
  @objc deinit
  public func encode(to encoder: Swift.Encoder) throws
  required public init(from decoder: Swift.Decoder) throws
}
extension PlaceMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PlaceMO>
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryTitle: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var categoryKey: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var major: [Swift.Int]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var address: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lon: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: ConfigMO? {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers public class PlaceMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension NavigationPropertiesMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<NavigationPropertiesMO>
  @objc @NSManaged dynamic public var isVisibleOnList: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isVisibleOnMap: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: NavigationMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var segments: Swift.Set<SegmentMO>? {
    @objc get
    @objc set
  }
}
extension BeaconMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BeaconMO>
  @objc @NSManaged dynamic public var major: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var minor: Swift.Int64 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var uuid: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var placeId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lat: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lon: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floor: Swift.Int64 {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers public class LocationProperties {
  public var floorLevel: Swift.Int?
  public var shopCenterPoint: CoreLocation.CLLocationCoordinate2D?
  required public init?(dictionary: Foundation.NSDictionary)
  @objc deinit
}
extension GeometryMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<GeometryMO>
  @objc @NSManaged dynamic public var coordinates: [Swift.Double]? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: LocationMO? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(FiltersMO) public class FiltersMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
public class StoreListManager {
  public init(placeId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  public func getInfoText() -> Swift.String
  public func getStoreList() -> [Poi]
  public func getCategories() -> [Swift.String]
  public func getFacilities() -> [Facility]
  @objc deinit
}
public class PointDetailManager {
  public init(target: Poi)
  public func getFloorLevel() -> Swift.String
  @objc deinit
}
extension ChildsMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<ChildsMO>
  @objc @NSManaged dynamic public var placeId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var lang: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var placeTitle: Swift.String {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var points: Swift.Set<PointMO>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var floors: Swift.Set<FloorMO>? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var facilities: Swift.Set<FacilityMO>? {
    @objc get
    @objc set
  }
}
extension ChildsMO {
  @objc(addPointsObject:) @NSManaged dynamic public func addToPoints(_ value: PointMO)
  @objc(removePointsObject:) @NSManaged dynamic public func removeFromPoints(_ value: PointMO)
  @objc(addPoints:) @NSManaged dynamic public func addToPoints(_ values: Foundation.NSSet)
  @objc(removePoints:) @NSManaged dynamic public func removeFromPoints(_ values: Foundation.NSSet)
}
extension PointMO {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<PointMO>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var category: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: ChildsMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var location: LocationMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var filters: FiltersMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var navigation: NavigationMO? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var properties: PropertiesMO? {
    @objc get
    @objc set
  }
}
@_inheritsConvenienceInitializers @objc(BeaconMO) public class BeaconMO : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
extension PMError : Swift.Equatable {}
extension PMError : Swift.Hashable {}
extension UserLocationStatus : Swift.Equatable {}
extension UserLocationStatus : Swift.Hashable {}
extension RouteError : Swift.Equatable {}
extension RouteError : Swift.Hashable {}
extension SelectedGraph : Swift.Equatable {}
extension SelectedGraph : Swift.Hashable {}
extension FloorPassMethod : Swift.Equatable {}
extension FloorPassMethod : Swift.Hashable {}
extension RouteStatus : Swift.Equatable {}
extension RouteStatus : Swift.Hashable {}
