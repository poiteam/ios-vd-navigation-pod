// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name PoilabsVdNavigationCore
import CoreLocation
import Foundation
import PoilabsCore
import PoilabsPositioning
import PoilabsSdkAnalytics
@_exported import PoilabsVdNavigationCore
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct Guide : Swift.Codable {
  public let image: Swift.String?
  public let title: Swift.String
  public let subtitle: Swift.String?
  public let content: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PositioningManagerDelegate {
  func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, heading: CoreLocation.CLHeading, in placeId: Swift.String)
  func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  func positioningManager(didStatusChanged status: UserLocationStatus)
}
public protocol PositioninManagerErrorDelegate {
  func positioningManager(didFail error: PMError)
  func positioningManagerDidStart()
}
public enum PMError {
  case location
  case bluetooth
  public static func == (a: PMError, b: PMError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UserLocationStatus {
  case waiting
  case notFound
  case found
  case arrived
  public static func == (a: UserLocationStatus, b: UserLocationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PositioningManager : ObjectiveC.NSObject {
  public var delegate: (any PositioningManagerDelegate)? {
    get
    set
  }
  public var errorDelegate: (any PositioninManagerErrorDelegate)?
  public static let shared: PositioningManager
  public func startOutdoorPositioning()
  public func stopOutdoorPositioning()
  public func startPositioning()
  public func stopPositioning()
  @objc deinit
  public func getPlaceTitle() -> Swift.String
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int, placeId: Swift.String?, isInDifferentBuilding: Swift.Bool) -> Swift.String
  public func getCurrentLocationDistanceLimit() -> Swift.Int
  public func getCurrentLocationDistanceLimit() -> Swift.Double
  @objc override dynamic public init()
}
extension PositioningManager : PoilabsPositioning.PoilabsPositioningDelegate {
  @objc dynamic public func poilabsPositioning(didUpdateLocation location: CoreLocation.CLLocation)
  @objc dynamic public func poilabsPositioning(didThresholdChange threshold: Swift.Int)
  @objc dynamic public func poilabsPositioning(didUpdateLocation location: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, accuracy: Swift.Double)
  @objc dynamic public func poilabsPositioningDidStart()
  @objc dynamic public func poilabsPositioning(didStatusChange status: PoilabsPositioning.PLPStatus, reason: PoilabsPositioning.PLPLocationStatusReason)
  @objc dynamic public func poilabsPositioning(didFindBeacon uuid: Swift.String, major: Swift.String, minor: Swift.String)
  @objc dynamic public func poilabsPositioning(didFail error: PoilabsPositioning.PoilabsPositioningError)
  @objc dynamic public func poilabsPositioning(didUpdateHeading heading: CoreLocation.CLHeading)
  public func setPlace(_ placeId: Swift.String)
}
public struct FloorProperties : Swift.Codable {
  public let conversionFactor: Swift.Double?
  public var conversionFactorDividend: Swift.Double?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Location : Swift.Codable {
  public let geometry: Geometry
  public let properties: LocationProperties?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Geometry : Swift.Codable {
  public let coordinates: [Swift.Double]
  public var locationCoordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LocationProperties : Swift.Codable {
  public let floorLevel: Swift.Int?
  public let shopCenterPoint: [Swift.Double]?
  public var shopCenterPointCoordinates: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Facility : Swift.Codable {
  public let pointType: Swift.String
  public let order: Swift.Int
  public let title: Swift.String
  public let titleEn: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Segment : Swift.Codable {
  public let id: Swift.String
  public let routeWeight: Swift.Double?
  public let weight: Swift.Double?
  public var startPoiId: Swift.String?
  public var finishPoiId: Swift.String?
  public var isAvailableForDisPerson: Swift.Bool {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct ChildProperties : Swift.Codable {
  public let content: Swift.String?
  public var restrictionWarning: Swift.String?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct PlaceBeacons : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Beacon : Swift.Codable {
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Poi : Swift.Codable {
  public var properties: ChildProperties?
  public var title: Swift.String
  public var id: Swift.String?
  public let tags: [Swift.String]?
  public let placeId: Swift.String?
  public init(from decoder: any Swift.Decoder) throws
  public var coordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var centerPoint: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var floorLevel: Swift.Int? {
    get
  }
  public var categoryOrSubcategoryName: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
}
extension Poi : Swift.Hashable {
  public static func == (lhs: Poi, rhs: Poi) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public class UserGuideManager {
  public init()
  public func getPoilabsVdNavigationVersionNumber() -> Swift.String
  public func getUserGuideItems() -> [Guide]
  public var contactEmail: Swift.String {
    get
  }
  @objc deinit
}
public struct ConfigData : Swift.Codable {
  public let lists: [List]?
  public let guide: [Guide]?
  public let contactEmail: Swift.String?
  public var allElements: [Element] {
    get
  }
  public var minRSSILimitIOS: Swift.Int? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct List : Swift.Codable {
  public let type: Swift.String?
  public let title: Swift.String?
  public let elements: [Element]?
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct Element : Swift.Codable {
  public let id: Swift.String
  public let title: Swift.String
  public let major: [Swift.Int]?
  public let address: Swift.String?
  public let lon: Swift.Double
  public let lat: Swift.Double
  public let childs: [Element]?
  public let outdoor: Swift.Bool?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool?
  public var childsList: [Element]? {
    get
  }
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol PoiVDNavigationManagerDelegate {
  func poiVdNavigationManager(didUpdate userLocation: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, floorName: Swift.String, placeId: Swift.String)
}
public struct PoiVdNavigationManagerSettings {
  public let usedLanguages: [Swift.String]
  public let usedFloorChangeMethods: [Swift.String]
}
public class PoiVDNavigationManager {
  public var delegate: (any PoiVDNavigationManagerDelegate)?
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, completionHandler: @escaping (Swift.Result<PoiVdNavigationManagerSettings, any Swift.Error>) -> Swift.Void)
  public func sdkRemoved()
  public func getMenuLevel() -> Swift.Int
  public func getMenuItems() -> [Element]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ItemCategory : Swift.Hashable {
  public static func == (lhs: ItemCategory, rhs: ItemCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  final public let type: Swift.String
  final public let name: Swift.String
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class ItemBase {
  public var category: ItemCategory
  public var elements: [Element]
  public func getElements() -> [Element]
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let deviceModelName: Swift.String
}
public enum RouteError {
  case noLocation, noRoute, unknown
  public static func == (a: RouteError, b: RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteGraphOption {
  case all, selected
  public static func == (a: RouteGraphOption, b: RouteGraphOption) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FloorPassMethod : Swift.String, Swift.Codable, Swift.CaseIterable {
  case elevator, escalator, stairs, all
  public init?(rawValue: Swift.String)
  public typealias AllCases = [FloorPassMethod]
  public typealias RawValue = Swift.String
  public static var allCases: [FloorPassMethod] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public enum RouteStatus {
  case outOfRoute, arrived, onRoute, arrivedAfterElevator
  public static func == (a: RouteStatus, b: RouteStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RouteManagerDelegate {
  func routeManager(currentUserLocation location: Poi, rotation: Swift.Int?, distance: Swift.Double)
  func routeManager(error: RouteError)
  func routeManager(routeCalculated route: PoilabsCore.PLNRoute)
  func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?, buildingTitle: Swift.String, isDiffBuilding: Swift.Bool)
  func routeManager(didUpdate routeStatus: RouteStatus)
  func routeManager(arrivedAtDirection direction: Swift.Int)
  func routeManager(stepUpdatedForStep step: PoilabsCore.PLNStep, forDistance distance: Swift.Int, toDirection direction: Swift.Int)
  func routeManager(isOnStepChangeForStep step: PoilabsCore.PLNStep, isFinalStep: Swift.Bool)
}
extension RouteManagerDelegate {
  public func routeManager(arrivedAtDirection direction: Swift.Int)
  public func routeManager(currentUserLocation location: Poi, rotation: Swift.Int?, distance: Swift.Double)
  public func routeManager(error: RouteError)
  public func routeManager(routeCalculated route: PoilabsCore.PLNRoute)
  public func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?, buildingTitle: Swift.String, isDiffBuilding: Swift.Bool)
  public func routeManager(didUpdate routeStatus: RouteStatus)
  public func routeManager(stepUpdatedForStep step: PoilabsCore.PLNStep, forDistance distance: Swift.Int, toDirection direction: Swift.Int)
  public func routeManager(isOnStepChangeForStep step: PoilabsCore.PLNStep, isFinalStep: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class RouteManager : ObjectiveC.NSObject {
  public var delegate: (any RouteManagerDelegate)? {
    get
    set
  }
  @objc override dynamic public init()
  public init(targetPoi: Poi?, withFloorPassMethods methods: RouteGraphOption)
  public init(type: Swift.String, withFloorPassMethods methods: RouteGraphOption)
  public func getPoi(withId poiId: Swift.String) -> Poi?
  public func routeRemoved()
  public func navigate()
  public func reInitRoute()
  public func getCurrentFloorPassMethods() -> [FloorPassMethod]
  public func isAllFloorPassMethodsUsing() -> Swift.Bool
  public func createAlternativeRoute() -> Swift.Bool
  public func getFloorDifferance() -> Swift.Int?
  public func getRouteLength() -> Swift.Int?
  public func getIsDifferentBuilding(targetPoi: Poi?) -> Swift.Bool
  @objc deinit
}
extension RouteManager : PoilabsCore.PLCoreDelegate {
  @objc dynamic public func didStepUpdate(forRouteIndex routeIndex: Swift.Int32, step stepIndex: Swift.Int32, withDistance distance: Swift.Int32, toDirection direction: Swift.Int32)
  @objc dynamic public func isOnStepChange(forRouteIndex routeIndex: Swift.Int32, step stepIndex: Swift.Int32, for stepType: PoilabsCore.PLNStepType)
}
extension RouteManager {
  public func getRemainingSteps() -> [PoilabsCore.PLNStep]
  public func getRoutePois() -> [Poi]
  public func getRemainingQmsTime() -> Swift.Int
}
extension RouteManager : PositioningManagerDelegate {
  public func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, heading: CoreLocation.CLHeading, in placeId: Swift.String)
  public func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  public func positioningManager(didStatusChanged status: UserLocationStatus)
}
public protocol PlaceListManagerDelegate {
  func placeListLoaded(status: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class PlaceListManager : ObjectiveC.NSObject {
  public var delegate: (any PlaceListManagerDelegate)?
  @objc override dynamic public init()
  public func getConfigList() -> [List]
  public func getPlaceList() -> [Element]
  public func saveConfig(config: ConfigData, appId: Swift.String, lang: Swift.String)
  public func getConfig(appId: Swift.String, lang: Swift.String) -> ConfigData?
  public func getPlaceFilteredList(elements: [Element]) -> [Element]?
  public func getCategories() -> [ItemCategory?]
  public func searchPlaceFilteredList(withQuery query: Swift.String? = "", on elements: [Element]) -> [Element]?
  @objc deinit
}
extension PlaceListManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
@_hasMissingDesignatedInitializers public class StoreListManager {
  public init(placeId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func storeListDisappeared()
  public func getBuildingAndFloorTitle(placeId: Swift.String?, floorLevel: Swift.Int) -> Foundation.NSAttributedString
  public func getInfoText() -> Swift.String
  public func getStoreList() -> [Poi]
  public func getCategories() -> [Swift.String]
  public func sortPoisByLocation(pois: [Poi]) -> [Poi]
  public func filterPoisByReachableZones(pois: [Poi]) -> [Poi]
  public func filterPoiList(withKeyword keyword: Swift.String, andCategoryFilter category: Swift.String? = nil) -> [Poi]
  public func getFacilities() -> [Facility]
  @objc deinit
}
public class PointDetailManager {
  public init(target: Poi?)
  public func getBuildingAndFloorLevel(placeId: Swift.String?) -> Swift.String
  @objc deinit
}
extension PMError : Swift.Equatable {}
extension PMError : Swift.Hashable {}
extension UserLocationStatus : Swift.Equatable {}
extension UserLocationStatus : Swift.Hashable {}
extension RouteError : Swift.Equatable {}
extension RouteError : Swift.Hashable {}
extension RouteGraphOption : Swift.Equatable {}
extension RouteGraphOption : Swift.Hashable {}
extension FloorPassMethod : Swift.Equatable {}
extension FloorPassMethod : Swift.Hashable {}
extension FloorPassMethod : Swift.RawRepresentable {}
extension RouteStatus : Swift.Equatable {}
extension RouteStatus : Swift.Hashable {}
