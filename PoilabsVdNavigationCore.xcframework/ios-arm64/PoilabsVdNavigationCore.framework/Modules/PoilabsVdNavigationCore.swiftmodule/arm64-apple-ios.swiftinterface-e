// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PoilabsVdNavigationCore
import Alamofire
import CoreLocation
import Foundation
import PoilabsPositioning
@_exported import PoilabsVdNavigationCore
import Swift
import UIKit
import _Concurrency
public protocol PositioningManagerDelegate {
  func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, heading: CoreLocation.CLHeading)
  func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  func positioningManager(didStatusChanged status: UserLocationStatus)
}
public protocol PositioninManagerErrorDelegate {
  func positioningManager(didFail error: PMError)
  func positioningManagerDidStart()
}
public enum PMError {
  case location
  case bluetooth
  public static func == (a: PMError, b: PMError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum UserLocationStatus {
  case waiting
  case notFound
  case found
  public static func == (a: UserLocationStatus, b: UserLocationStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class PositioningManager : ObjectiveC.NSObject {
  public var delegate: PositioningManagerDelegate? {
    get
    set
  }
  public var errorDelegate: PositioninManagerErrorDelegate?
  public static let shared: PositioningManager
  public func startPositioning()
  public func stopPositioning()
  public func getPlaceTitle() -> Swift.String
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
extension PositioningManager : PoilabsPositioning.PoilabsPositioningDelegate {
  @objc dynamic public func poilabsPositioning(didThresholdChange threshold: Swift.Int)
  @objc dynamic public func poilabsPositioning(didUpdateLocation location: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, accuracy: Swift.Double)
  @objc dynamic public func poilabsPositioningDidStart()
  @objc dynamic public func poilabsPositioning(didStatusChange status: PoilabsPositioning.PLPStatus, reason: PoilabsPositioning.PLPLocationStatusReason)
  @objc dynamic public func poilabsPositioning(didFindBeacon uuid: Swift.String, major: Swift.String, minor: Swift.String)
  @objc dynamic public func poilabsPositioning(didFail error: PoilabsPositioning.PoilabsPositioningError)
  @objc dynamic public func poilabsPositioning(didUpdateHeading heading: CoreLocation.CLHeading)
}
public enum NavigationSettingsRouteOptionType : Swift.String, Swift.Codable, Swift.CaseIterable {
  case all, elevator, escalator, stairs
  public init?(rawValue: Swift.String)
  public typealias AllCases = [NavigationSettingsRouteOptionType]
  public typealias RawValue = Swift.String
  public static var allCases: [NavigationSettingsRouteOptionType] {
    get
  }
  public var rawValue: Swift.String {
    get
  }
}
public struct FloorProperties : Swift.Codable {
  public let centerPoint: [Swift.Double]
  public let conversionFactor: Swift.Double?
  public var routeConversionFactorDividend: Swift.Double?
  public var conversionFactorDividend: Swift.Double?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Location : Swift.Codable {
  public let geometry: Geometry
  public let properties: LocationProperties?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Geometry : Swift.Codable {
  public let coordinates: [Swift.Double]
  public var locationCoordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct LocationProperties : Swift.Codable {
  public let floorLevel: Swift.Int?
  public let shopCenterPoint: [Swift.Double]?
  public var shopCenterPointCoordinates: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Facility : Swift.Codable {
  public let pointType: Swift.String
  public let order: Swift.Int
  public let title: Swift.String
  public let titleEn: Swift.String
  public let iconUrl: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Navigation : Swift.Codable {
  public let properties: NavigationProperties?
  public var segments: [Segment]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct NavigationProperties : Swift.Codable {
  public var isVisOnList: Swift.Bool {
    get
  }
  public var isVisOnMap: Swift.Bool {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Segment : Swift.Codable {
  public let id: Swift.String
  public let routeWeight: Swift.Double?
  public let weight: Swift.Double?
  public var startPoiId: Swift.String?
  public var finishPoiId: Swift.String?
  public var isAvailableForDisPerson: Swift.Bool {
    get
  }
  public var startNode: PESGraphNode? {
    get
  }
  public var finishNode: PESGraphNode? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct ChildProperties : Swift.Codable {
  public let content: Swift.String?
  public var restrictionWarning: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PlaceBeacons : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Beacon : Swift.Codable {
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Poi : Swift.Codable {
  public var properties: ChildProperties?
  public var title: Swift.String
  public var id: Swift.String?
  public var navigation: Navigation?
  public let tags: [Swift.String]?
  public init(from decoder: Swift.Decoder) throws
  public var node: PESGraphNode? {
    get
  }
  public var coordinates: CoreLocation.CLLocationCoordinate2D {
    get
  }
  public var centerPoint: CoreLocation.CLLocationCoordinate2D? {
    get
  }
  public var floorLevel: Swift.Int? {
    get
  }
  public var categoryOrSubcategoryName: Swift.String {
    get
  }
  public var categoryName: Swift.String {
    get
  }
  public func contains(keyword: Swift.String) -> Swift.Bool
  public func encode(to encoder: Swift.Encoder) throws
}
extension Poi : Swift.Hashable {
  public static func == (lhs: Poi, rhs: Poi) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension Foundation.Bundle {
  public class var applicationVersionNumber: Swift.String {
    get
  }
}
public struct ConfigData : Swift.Codable {
  public let uuid: Swift.String
  public let messagingTime: Swift.Double
  public let beaconCount: Swift.Int
  public let fullInit: Swift.Bool?
  public let positioning: Positioning?
  public let lists: [List]
  public let childsURL: Swift.String
  public let placeBeaconsURL: Swift.String
  public let initListURL: Swift.String?
  public let menuLevel: Swift.Int
  public var allElements: [Element] {
    get
  }
  public var minRSSILimitIOS: Swift.Int? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct List : Swift.Codable {
  public let type: Swift.String
  public let name: Name
  public let elements: [Element]
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Element : Swift.Codable {
  public let id: Swift.String, title: Swift.String
  public let major: [Swift.Int]?
  public let address: Swift.String?
  public let lon: Swift.Double, lat: Swift.Double
  public let childs: [Element]?
  public init(from decoder: Swift.Decoder) throws
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var childsList: [Element]? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Name : Swift.Codable {
  public let tr: Swift.String, en: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Positioning : Swift.Codable {
  public let beaconScanInterval: Swift.Double, locationUpdateInterval: Swift.Double
  public let requestInterval: Swift.Int
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol PoiVDNavigationManagerDelegate {
  func poiVdNavigationManager(didUpdate userLocation: CoreLocation.CLLocationCoordinate2D, floorLevel: Swift.Int, floorName: Swift.String)
}
public class PoiVDNavigationManager {
  public var delegate: PoiVDNavigationManagerDelegate?
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getMenuLevel() -> Swift.Int
  public func getMenuItems() -> [Element]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ItemCategory : Swift.Hashable {
  public static func == (lhs: ItemCategory, rhs: ItemCategory) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var type: Swift.String
  public var nameTr: Swift.String
  public var nameEn: Swift.String
  public var name: Swift.String {
    get
  }
  @objc deinit
  public var hashValue: Swift.Int {
    get
  }
}
public class ItemBase {
  public var category: ItemCategory
  public var elements: [Place]
  required public init?(dictionary: Foundation.NSDictionary)
  public func getElements() -> [Place]
  public class func modelsFromDictionaryArray(array: Foundation.NSArray) -> [ItemBase]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Place {
  public var id: Swift.String!
  public var title: Swift.String?
  public var major: [Swift.Int]
  public var address: Swift.String?
  public var lat: Swift.Double?
  public var lon: Swift.Double?
  public var childs: [Place]?
  public var distance: Swift.Double?
  public var isFavorite: Swift.Bool
  public var type: ItemCategory!
  public class func modelsFromDictionaryArray(array: Foundation.NSArray, type: ItemCategory) -> [Place]
  required public init?(dictionary: Foundation.NSDictionary, type: ItemCategory)
  @objc deinit
}
extension UIKit.UIDevice {
  @_Concurrency.MainActor(unsafe) public static let deviceModelName: Swift.String
}
public enum RouteError {
  case noLocation, noRoute, unknown
  public static func == (a: RouteError, b: RouteError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SelectedGraph {
  case mainGraph, graphWithSelections
  public static func == (a: SelectedGraph, b: SelectedGraph) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum FloorPassMethod {
  case elevator, escalator, stairs
  public static func == (a: FloorPassMethod, b: FloorPassMethod) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum RouteStatus {
  case outOfRoute, arrived, onRoute
  public static func == (a: RouteStatus, b: RouteStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol RouteManagerDelegate {
  func routeManager(floorChangeStep destinationFloor: Swift.Int, by floorPassMethod: FloorPassMethod)
  func routeManager(currentUserLocation location: (Poi, Swift.Int?))
  func routeManager(error: RouteError)
  func routeManager(routeCalculated route: PESGraphRoute, target: Poi)
  func routeManager(updateCurrentStep meters: Swift.Int, rotation: Swift.Int)
  func routeManager(updateRouteSummary distance: Swift.Int, floorDif: Swift.Int, rotation: Swift.Int?)
  func routeManager(didUpdate routeStatus: RouteStatus)
  func routeManager(arrivedAtDirection direction: Swift.Int)
}
extension RouteManagerDelegate {
  public func routeManager(arrivedAtDirection direction: Swift.Int)
}
public struct RemainingDistanceItem {
  public let text: Swift.String
  public var argumants: [Swift.Int]
}
public class RouteManager {
  public var delegate: RouteManagerDelegate? {
    get
    set
  }
  public init(targetPoi: Poi, on graph: SelectedGraph)
  public init(type: Swift.String, on graph: SelectedGraph)
  public func navigate()
  public func reInitRoute()
  public func getSelectedGraph() -> SelectedGraph
  public func createAlternativeRoute(graph: SelectedGraph) -> Swift.Bool
  public func getFloorDifferance() -> Swift.Int?
  public func getRouteLength() -> Swift.Int?
  @objc deinit
}
extension RouteManager {
  public func getRemainingSteps(firstNSteps: Swift.Int? = nil) -> [RemainingDistanceItem]
  public func getRoutePois() -> [Poi]
}
extension RouteManager : PositioningManagerDelegate {
  public func positioningManager(didUpdate coordinate: CoreLocation.CLLocationCoordinate2D, heading: CoreLocation.CLHeading)
  public func positioningManager(didUpdateNearByLocations locations: [(Poi, Swift.Double, Swift.Int?)])
  public func positioningManager(didStatusChanged status: UserLocationStatus)
}
public protocol PlaceListManagerDelegate {
  func placeListLoaded(status: Swift.Bool)
}
@objc @_inheritsConvenienceInitializers public class PlaceListManager : ObjectiveC.NSObject {
  public var delegate: PlaceListManagerDelegate?
  @objc override dynamic public init()
  public func getConfigList() -> [List]
  public func getPlaceList() -> [Element]
  public func saveConfig(config: ConfigData, appId: Swift.String, lang: Swift.String)
  public func getConfig(appId: Swift.String, lang: Swift.String) -> ConfigData?
  public func getPlaceFilteredList() -> [Element]?
  public func getCategories() -> [ItemCategory]
  public func searchPlaceFilteredList(withQuery query: Swift.String? = "") -> [Element]?
  @objc deinit
}
extension PlaceListManager : CoreLocation.CLLocationManagerDelegate {
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didUpdateLocations locations: [CoreLocation.CLLocation])
  @objc dynamic public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
@_hasMissingDesignatedInitializers public class StoreListManager {
  public init(placeId: Swift.String, completionHandler: @escaping (Swift.Bool) -> Swift.Void)
  public func getTitleFloor(withFloorLevel floorLevel: Swift.Int) -> Swift.String
  public func getInfoText() -> Swift.String
  public func getStoreList() -> [Poi]
  public func getCategories() -> [Swift.String]
  public func sortPoisByLocation(pois: [Poi]) -> [Poi]
  public func filterPoisByReachableZones(pois: [Poi]) -> [Poi]
  public func getFacilities() -> [Facility]
  @objc deinit
}
public class PointDetailManager {
  public init(target: Poi)
  public func getFloorLevel() -> Swift.String
  @objc deinit
}
extension PMError : Swift.Equatable {}
extension PMError : Swift.Hashable {}
extension UserLocationStatus : Swift.Equatable {}
extension UserLocationStatus : Swift.Hashable {}
extension NavigationSettingsRouteOptionType : Swift.Equatable {}
extension NavigationSettingsRouteOptionType : Swift.Hashable {}
extension NavigationSettingsRouteOptionType : Swift.RawRepresentable {}
extension RouteError : Swift.Equatable {}
extension RouteError : Swift.Hashable {}
extension SelectedGraph : Swift.Equatable {}
extension SelectedGraph : Swift.Hashable {}
extension FloorPassMethod : Swift.Equatable {}
extension FloorPassMethod : Swift.Hashable {}
extension RouteStatus : Swift.Equatable {}
extension RouteStatus : Swift.Hashable {}
