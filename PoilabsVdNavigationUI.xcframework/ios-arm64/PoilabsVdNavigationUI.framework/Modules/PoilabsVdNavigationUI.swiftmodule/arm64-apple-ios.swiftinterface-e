// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios12.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name PoilabsVdNavigationUI
// swift-module-flags-ignorable: -enable-bare-slash-regex
import CoreBluetooth
import CoreLocation
import Foundation
import MessageUI
import PoilabsVdNavigationCore
@_exported import PoilabsVdNavigationUI
import StepSlider
import Swift
import UIKit
import _Concurrency
import _StringProcessing
public struct Style<View> where View : UIKit.UIView {
  public let style: (View) -> Swift.Void
  public init(_ style: @escaping (View) -> Swift.Void)
  public func apply(to view: View)
}
extension UIKit.UIFont {
  public static func jbs_registerFont(withFilenameString filenameString: Swift.String, bundle: Foundation.Bundle)
}
public class PoilabsVdNavigationUI {
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, additionalViewControllers: [PoilabsVdNavigationUI.AdditionalSettings] = [], completionHandler: @escaping (UIKit.UIViewController) -> Swift.Void)
  @objc deinit
}
public struct SettingType {
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) convenience public init<V>(style: PoilabsVdNavigationUI.Style<V>) where V : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func apply<V>(_ style: PoilabsVdNavigationUI.Style<V>) where V : UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func style<V>(_ style: PoilabsVdNavigationUI.Style<V>) -> V where V : UIKit.UIView
}
public typealias doneBlock = ((_ selectedRow: Swift.Int, _ value: Swift.String) -> ())?
public typealias cancelBlock = (() -> ())?
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BUStringPickerController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) convenience public init(_ title: Swift.String = "", values: [Swift.String], initialValue: Swift.Int = 0, onSuccess: PoilabsVdNavigationUI.doneBlock? = nil, onCancel: PoilabsVdNavigationUI.cancelBlock?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func show()
  @objc @_Concurrency.MainActor(unsafe) public func showAnimation()
  @objc @_Concurrency.MainActor(unsafe) public func dismissAnimation(_ onSuccess: (() -> ())?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PoilabsVdNavigationUI.BUStringPickerController {
  @_Concurrency.MainActor(unsafe) public func setTitle(font: UIKit.UIFont? = nil)
  @_Concurrency.MainActor(unsafe) public func setDoneButton(_ title: Swift.String, font: UIKit.UIFont? = nil)
  @_Concurrency.MainActor(unsafe) public func setCancelButton(_ title: Swift.String, font: UIKit.UIFont? = nil)
  @_Concurrency.MainActor(unsafe) public func setPicker(_ font: UIKit.UIFont? = nil, _ textColor: UIKit.UIColor = .black, _ aligment: UIKit.NSTextAlignment = .center)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AccesiblePickerContainer : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var accessibilityValue: Swift.String? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func accessibilityActivate() -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func accessibilityIncrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func accessibilityDecrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public class StyleSettings {
  public static let shared: PoilabsVdNavigationUI.StyleSettings
  public init()
  public var navigationTintColor: UIKit.UIColor
  public var avmListTitleColor: UIKit.UIColor
  public var blackBackgroundColor: UIKit.UIColor
  public var whiteBackgroundColor: UIKit.UIColor
  public var brownGrey: UIKit.UIColor
  public var darkishBlue: UIKit.UIColor
  public var lightBlue: UIKit.UIColor
  public var brownGreyTwo: UIKit.UIColor
  public var greyishBrown: UIKit.UIColor
  public var brownishGrey: UIKit.UIColor
  public var veryLightPink: UIKit.UIColor
  public var veryLightPinkThree: UIKit.UIColor
  public var blindoorsBlack: UIKit.UIColor
  public var blackTwo: UIKit.UIColor
  public var blackThree: UIKit.UIColor
  @objc deinit
}
extension UIKit.UIColor {
  convenience public init(r: CoreFoundation.CGFloat, g: CoreFoundation.CGFloat, b: CoreFoundation.CGFloat)
  convenience public init(r: CoreFoundation.CGFloat, g: CoreFoundation.CGFloat, b: CoreFoundation.CGFloat, a: CoreFoundation.CGFloat)
}
public struct AdditionalSettings {
  public init(title: Swift.String, image: UIKit.UIImage, controller: UIKit.UIViewController)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class StartingViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
