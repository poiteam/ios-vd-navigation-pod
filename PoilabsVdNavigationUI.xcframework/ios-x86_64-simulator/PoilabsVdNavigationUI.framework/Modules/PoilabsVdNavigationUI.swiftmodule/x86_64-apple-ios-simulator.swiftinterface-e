// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name PoilabsVdNavigationUI
import CoreLocation
import Foundation
import PoilabsVdNavigationCore
@_exported import PoilabsVdNavigationUI
import Swift
import UIKit
import _Concurrency
public struct Style<View> where View : UIKit.UIView {
  public let style: (View) -> Swift.Void
  public init(_ style: @escaping (View) -> Swift.Void)
  public func apply(to view: View)
}
extension UIKit.UIColor {
  public convenience init(r: CoreGraphics.CGFloat, g: CoreGraphics.CGFloat, b: CoreGraphics.CGFloat)
  public convenience init(r: CoreGraphics.CGFloat, g: CoreGraphics.CGFloat, b: CoreGraphics.CGFloat, a: CoreGraphics.CGFloat)
}
public class StyleSettings {
  public static var shared: PoilabsVdNavigationUI.StyleSettings
  public init()
  public var navigationBackgroundColor: UIKit.UIColor
  public var headerTextColor: UIKit.UIColor
  public var headerBackgroundColor: UIKit.UIColor
  public var navigationTintColor: UIKit.UIColor
  public var avmListTitleColor: UIKit.UIColor
  public var avmListSubtitleColor: UIKit.UIColor
  public var avmListArrowColor: UIKit.UIColor
  public var detailMenuUnselected: UIKit.UIColor
  public var detailMenuSelected: UIKit.UIColor
  public var navigationSeperatorColor: UIKit.UIColor
  public var progressTextColor: UIKit.UIColor
  @objc deinit
}
public class PoilabsVdNavigationUI {
  public init(configUrl: Swift.String? = nil, withApplicationID appID: Swift.String, withApplicationSecret secret: Swift.String, withUniqueIdentifier Id: Swift.String, lang: Swift.String, colors: [UIKit.UIColor]? = nil, completionHandler: @escaping (UIKit.UIViewController) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class MainViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public var poiVDNavigation: PoilabsVdNavigationCore.PoiVDNavigationManager?
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PoilabsVdNavigationUI.MainViewController : UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
}
extension PoilabsVdNavigationUI.MainViewController : PoilabsVdNavigationCore.PoiVDNavigationManagerDelegate {
  @_Concurrency.MainActor(unsafe) public func PoiVDNavigationManager(didChangeAuthorization status: Swift.Bool)
  @_Concurrency.MainActor(unsafe) public func PoiVDNavigationManager(centralManagerDidUpdateState status: Swift.Bool)
}
extension UIKit.UIView {
  @_Concurrency.MainActor(unsafe) public convenience init<V>(style: PoilabsVdNavigationUI.Style<V>) where V : UIKit.UIView
  @_Concurrency.MainActor(unsafe) public func apply<V>(_ style: PoilabsVdNavigationUI.Style<V>) where V : UIKit.UIView
  @discardableResult
  @_Concurrency.MainActor(unsafe) public func style<V>(_ style: PoilabsVdNavigationUI.Style<V>) -> V where V : UIKit.UIView
}
public typealias doneBlock = ((_ selectedRow: Swift.Int, _ value: Swift.String) -> ())?
public typealias cancelBlock = (() -> ())?
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class BUStringPickerController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public convenience init(_ title: Swift.String = "", values: [Swift.String], initialValue: Swift.Int = 0, onSuccess: PoilabsVdNavigationUI.doneBlock? = nil, onCancel: PoilabsVdNavigationUI.cancelBlock?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public func show()
  @objc @_Concurrency.MainActor(unsafe) public func showAnimation()
  @objc @_Concurrency.MainActor(unsafe) public func dismissAnimation(_ onSuccess: (() -> ())?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension PoilabsVdNavigationUI.BUStringPickerController {
  @_Concurrency.MainActor(unsafe) public func setTitle(font: UIKit.UIFont? = nil)
  @_Concurrency.MainActor(unsafe) public func setDoneButton(_ title: Swift.String, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor = .black)
  @_Concurrency.MainActor(unsafe) public func setCancelButton(_ title: Swift.String, font: UIKit.UIFont? = nil, textColor: UIKit.UIColor = .black)
  @_Concurrency.MainActor(unsafe) public func setPicker(_ font: UIKit.UIFont? = nil, _ textColor: UIKit.UIColor = .black, _ aligment: UIKit.NSTextAlignment = .center)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) public class AccesiblePickerContainer : UIKit.UIView {
  @objc override dynamic public func accessibilityActivate() -> Swift.Bool
  @objc override dynamic public func accessibilityIncrement()
  @objc override dynamic public func accessibilityDecrement()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
